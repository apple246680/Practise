{"version":1,"Request":{"Prompt":"define for C#","Context":{"VisibleDocuments":[{"Content":"\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.Data;\r\nusing System.Diagnostics;\r\nusing System.Drawing;\r\nusing System.Globalization;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Windows.Forms;\r\nnamespace Session6\r\n{\r\n    public partial class Main : Form\r\n    {\r\n        public Main()\r\n        {\r\n            InitializeComponent();\r\n            init();\r\n\r\n        }\r\n        public void init()\r\n        {\r\n            Session6Entities entities = new Session6Entities();\r\n            FromDateTimePicker.CustomFormat = \u0022 \u0022;\r\n            ToDateTimePicker.CustomFormat = \u0022 \u0022;\r\n            var areaData = entities.Areas.Select(t =\u003E new { t.ID, t.Name }).ToList();\r\n            areaData.Insert(0, new { ID = (long)-1, Name = \u0022\u0022 });\r\n            AreaComboBox.DataSource = areaData;\r\n            AreaComboBox.DisplayMember = \u0022Name\u0022;\r\n            AreaComboBox.ValueMember = \u0022ID\u0022;\r\n            var hostData = entities.Users.Where(t =\u003E t.Items.Any()).Select(t =\u003E new { t.ID, t.FullName }).OrderBy(t =\u003E t.FullName).ToList();\r\n            hostData.Insert(0, new { ID = (long)-1, FullName = \u0022\u0022 });\r\n            HostComboBox.DataSource = hostData;\r\n            HostComboBox.DisplayMember = \u0022FullName\u0022;\r\n            HostComboBox.ValueMember = \u0022ID\u0022;\r\n            var guestData = entities.Users.Where(t =\u003E t.Bookings.Any()).OrderBy(t =\u003E t.Items.Count()).ToList().Reverse\u003CUsers\u003E().Select(t =\u003E new { t.ID, t.FullName }).ToList();\r\n            guestData.Insert(0, new { ID = (long)-1, FullName = \u0022\u0022 });\r\n            GuestComboBox.DataSource = guestData;\r\n            GuestComboBox.DisplayMember = \u0022FullName\u0022;\r\n            GuestComboBox.ValueMember = \u0022ID\u0022;\r\n        }\r\n        private void FromDateTimePicker_ValueChanged(object sender, EventArgs e)\r\n        {\r\n            ((DateTimePicker)sender).Format = DateTimePickerFormat.Custom;\r\n            ((DateTimePicker)sender).CustomFormat = \u0022yyyy-MM-dd\u0022;\r\n        }\r\n        private void ResetBtn_Click(object sender, EventArgs e) =\u003E init();\r\n        private void ApplyBtn_Click(object sender, EventArgs e)\r\n        {\r\n            if (!String.IsNullOrWhiteSpace(FromDateTimePicker.Text) \u0026\u0026 !String.IsNullOrWhiteSpace(ToDateTimePicker.Text))\r\n            {\r\n                if (FromDateTimePicker.Value.Date \u003E ToDateTimePicker.Value.Date)\r\n                {\r\n                    MessageBox.Show(\u0022From date can\u0027t over To date.\u0022);\r\n                    return;\r\n                }\r\n            }\r\n            if (TabControlMain.SelectedIndex == 0)\r\n                page1();\r\n            if (TabControlMain.SelectedIndex == 1)\r\n                page2();\r\n            if (TabControlMain.SelectedIndex == 2)\r\n                page3();\r\n        }\r\n        public void page1()\r\n        {\r\n            Session6Entities entities = new Session6Entities();\r\n            ListingsSummaryPanel.Controls.Clear();\r\n            ScoresSummaryPanel.Controls.Clear();\r\n            FinancialSummaryPanel.Controls.Clear();\r\n            chart.Series[0].Points.Clear();\r\n            chart.Series[1].Points.Clear();\r\n            var items = entities.Items.ToList();\r\n            var itemPrices = entities.ItemPrices.ToList();\r\n            var transactions = entities.Transactions.ToList();\r\n            var bookingDetails = entities.BookingDetails.ToList();\r\n            if (!String.IsNullOrWhiteSpace(FromDateTimePicker.Text))\r\n            {\r\n                itemPrices = itemPrices.Where(t =\u003E t.Date.Date \u003E= FromDateTimePicker.Value.Date).ToList();\r\n                transactions = transactions.Where(t =\u003E t.TransactionDate.Date \u003E= FromDateTimePicker.Value.Date).ToList();\r\n            }\r\n            if (!String.IsNullOrWhiteSpace(ToDateTimePicker.Text))\r\n            {\r\n                itemPrices = itemPrices.Where(t =\u003E t.Date.Date \u003C= ToDateTimePicker.Value.Date).ToList();\r\n                transactions = transactions.Where(t =\u003E t.TransactionDate.Date \u003C= ToDateTimePicker.Value.Date).ToList();\r\n            }\r\n            if (!String.IsNullOrWhiteSpace(AreaComboBox.Text))\r\n            {\r\n                var areaId = (long)AreaComboBox.SelectedValue;\r\n                items = items.Where(t =\u003E t.AreaID == areaId).ToList();\r\n                itemPrices = itemPrices.Where(t =\u003E t.Items.AreaID == areaId).ToList();\r\n            }\r\n            if (!String.IsNullOrWhiteSpace(HostComboBox.Text))\r\n            {\r\n                var hostId = (long)HostComboBox.SelectedValue;\r\n                items = items.Where(t =\u003E t.UserID == hostId).ToList();\r\n                itemPrices = itemPrices.Where(t =\u003E t.Items.UserID == hostId).ToList();\r\n                transactions = transactions.Where(t =\u003E t.UserID == hostId).ToList();\r\n            }\r\n            if (!String.IsNullOrWhiteSpace(GuestComboBox.Text))\r\n            {\r\n                var guestId = (long)GuestComboBox.SelectedValue;\r\n                transactions = transactions.Where(t =\u003E t.UserID == guestId).ToList();\r\n                bookingDetails = bookingDetails.Where(t =\u003E t.Bookings.UserID == guestId).ToList();\r\n            }\r\n            #region Property or listing summary\r\n            var completeBooked = bookingDetails.Where(t =\u003E !t.isRefund \u0026\u0026 t.ItemPrices.Date.Date \u003C DateTime.Now.Date).ToList();\r\n            CreateLabel($\u0022Secured Bookings: {completeBooked.Count()}\u0022, ListingsSummaryPanel, 0);\r\n            var ppcomingBooked = bookingDetails\r\n                .Where(t =\u003E !t.isRefund \u0026\u0026 t.ItemPrices.Date.Date \u003E= DateTime.Now.Date).ToList();\r\n            CreateLabel($\u0022Upcoming Bookings(reservations): {ppcomingBooked.Count()}\u0022, ListingsSummaryPanel, 1);\r\n            var mostBookedDate = completeBooked.GroupBy(t =\u003E t.ItemPrices.Date.DayOfWeek).OrderByDescending(t =\u003E t.Count()).FirstOrDefault();\r\n            CreateLabel($\u0022Most booked day of week: {(mostBookedDate != null ? mostBookedDate.Key.ToString() : \u0022N/A\u0022)}\u0022, ListingsSummaryPanel, 2);\r\n            var inactiveItems = items.Where(t =\u003E !t.ItemPrices.Any()).ToList();\r\n            CreateLabel($\u0022Inactive listings or properties: {inactiveItems.Count()}\u0022, ListingsSummaryPanel, 3);\r\n            var coupons = bookingDetails.Where(t =\u003E t.Bookings.CouponID.HasValue).GroupBy(t =\u003E t.Bookings.Coupons).Select(t =\u003E new { Name = t.Key.CouponCode, Count = t.Count() }).GroupBy(t =\u003E t.Count).OrderByDescending(t =\u003E t.Key).FirstOrDefault();\r\n            CreateLabel($\u0022Most used coupon:  {(coupons == null ? \u0022N/A\u0022 : String.Join(\u0022,\u0022, coupons.Select(t =\u003E t.Name)))}\u0022, ListingsSummaryPanel, 4);\r\n            var vacancy = itemPrices.Where(t =\u003E !t.BookingDetails.Any() || t.BookingDetails.All(x =\u003E x.isRefund)).ToList();\r\n            CreateLabel($\u0022Vacancy ratio: {vacancy.Count()}/{itemPrices.Count()}\u0022, ListingsSummaryPanel, 5);\r\n            #endregion\r\n            #region Scores Summary\r\n            var AverageScore = items.Where(x =\u003E x.ItemScores.Any()).SelectMany(x =\u003E x.ItemScores);\r\n            CreateLabel($\u0022Average score for listings:  {(AverageScore.Any() ? AverageScore.Average(t =\u003E t.Value).ToString(\u0022#.##\u0022) : \u0022N/A\u0022)}\u0022, ScoresSummaryPanel, 0);\r\n            var hightscore = items.Where(t =\u003E t.ItemScores.Any()).Select(t =\u003E new { Name = t.Title, Score = t.ItemScores.Average(x =\u003E x.Value) }).OrderByDescending(t =\u003E t.Score).FirstOrDefault();\r\n            CreateLabel($\u0022Name of listing with highest score:  {(hightscore == null ? \u0022N/A\u0022 : hightscore.Name)}\u0022, ScoresSummaryPanel, 1);\r\n            var topScoreUser = items.Where(t =\u003E t.ItemScores.Any()).Select(t =\u003E new { Name = t.Users.FullName, Score = t.ItemScores.Average(x =\u003E x.Value) }).GroupBy(t =\u003E t.Score).OrderByDescending(t =\u003E t.Key).FirstOrDefault();\r\n            CreateLabel($\u0022Top owner / manager by average score: {(topScoreUser == null ? \u0022N/A\u0022 : String.Join(\u0022,\u0022, topScoreUser.Select(t =\u003E t.Name)))}\u0022, ScoresSummaryPanel, 2);\r\n            var leastScoreUser = items.Where(t =\u003E t.ItemScores.Any()).Select(t =\u003E new { Name = t.Users.FullName, Score = t.ItemScores.Average(x =\u003E x.Value) }).GroupBy(t =\u003E t.Score).OrderBy(t =\u003E t.Key).FirstOrDefault();\r\n            CreateLabel($\u0022The least clean owner / manager:   {(leastScoreUser == null ? \u0022N/A\u0022 : String.Join(\u0022,\u0022, leastScoreUser.Select(t =\u003E t.Name)))}\u0022, ScoresSummaryPanel, 3);\r\n            #endregion\r\n            #region Monthly Vacancy Ratio:\r\n            var timefiler = !String.IsNullOrWhiteSpace(ToDateTimePicker.Text) ? ToDateTimePicker.Value : DateTime.Now;\r\n            var start = new DateTime(timefiler.AddMonths(-2).Year, timefiler.AddMonths(-2).Month, 1);\r\n            var end = new DateTime(timefiler.Year, timefiler.Month, DateTime.DaysInMonth(timefiler.Year, timefiler.Month));\r\n            for (DateTime temp = start; temp \u003C end; temp = temp.AddMonths(1))\r\n            {\r\n                DateTime nextMonth = temp.AddMonths(1);\r\n                var data = itemPrices.Where(t =\u003E t.Date \u003E= temp \u0026\u0026 t.Date \u003C nextMonth).ToList();\r\n                chart.Series[0].Points.AddXY(temp.Date.ToString(\u0022MMM\u0022, new CultureInfo(\u0022en-US\u0022)), data.Count(t =\u003E !t.BookingDetails.Any() || t.BookingDetails.All(x =\u003E x.isRefund)));\r\n                chart.Series[1].Points.AddXY(temp.Date.ToString(\u0022MMM\u0022, new CultureInfo(\u0022en-US\u0022)), data.Count(t =\u003E t.BookingDetails.Any(x =\u003E !x.isRefund)));\r\n            }\r\n            #endregion\r\n            #region Financial Summary\r\n            decimal cancelAmount = 0;\r\n            decimal totalDiscount = 0;\r\n            List\u003CTuple\u003CUsers, decimal\u003E\u003E userRevenue = new List\u003CTuple\u003CUsers, decimal\u003E\u003E();\r\n            foreach (var transaction in transactions)\r\n            {\r\n                foreach (var booking in transaction.Bookings)\r\n                {\r\n                    foreach (var bookingDetail in booking.BookingDetails)\r\n                    {\r\n                        if (!String.IsNullOrWhiteSpace(HostComboBox.Text)\r\n                            \u0026\u0026 bookingDetail.ItemPrices.Items.UserID == (long)HostComboBox.SelectedValue)\r\n                        {\r\n                            continue;\r\n                        }\r\n                        if (!String.IsNullOrWhiteSpace(GuestComboBox.Text)\r\n                            \u0026\u0026 booking.UserID == (long)GuestComboBox.SelectedValue)\r\n                        {\r\n                            continue;\r\n                        }\r\n                        decimal total = bookingDetail.ItemPrices.Price -\r\n                            bookingDetail.ItemPrices.Price * (bookingDetail.ItemPrices.CancellationPolicies.Commission / 100);\r\n                        if (booking.CouponID.HasValue)\r\n                        {\r\n                            decimal discount = bookingDetail.ItemPrices.Price * (booking.Coupons.DiscountPercent / 100);\r\n                            if (discount \u003E booking.Coupons.MaximimDiscountAmount)\r\n                            {\r\n                                discount = booking.Coupons.MaximimDiscountAmount;\r\n                            }\r\n                            total -= discount;\r\n                            totalDiscount \u002B= discount;\r\n                        }\r\n                        if (bookingDetail.isRefund)\r\n                        {\r\n                            total = 0;\r\n                            var dayLeft = (bookingDetail.ItemPrices.Date - bookingDetail.RefundDate.Value).Days;\r\n                            var fee = entities.CancellationRefundFees\r\n                                .FirstOrDefault(t =\u003E t.CancellationPolicyID == bookingDetail.RefundCancellationPoliciyID\r\n                                    \u0026\u0026 t.DaysLeft == dayLeft);\r\n                            if (fee != null)\r\n                            {\r\n                                var refundAmount = bookingDetail.ItemPrices.Price * (fee.PenaltyPercentage / 100) / 2;\r\n                                cancelAmount \u002B= refundAmount;\r\n                                total = refundAmount;\r\n                            }\r\n                        }\r\n                        userRevenue.Add(new Tuple\u003CUsers, decimal\u003E(booking.Users, total));\r\n                    }\r\n                }\r\n            }\r\n            var userRevenueMapping = userRevenue.GroupBy(t =\u003E t.Item1).ToList();\r\n            CreateLabel($\u0022Average net revenue of all owners / managers: {(userRevenueMapping.Count() != 0 ? userRevenueMapping.Average(t =\u003E t.Sum(x =\u003E x.Item2)).ToString(\u0022#.##\u0022) : \u00220\u0022)}\u0022, FinancialSummaryPanel, 0);\r\n            CreateLabel($\u0022Highest net revenue for an owner / manager: \u0022 \u002B $\u0022{(userRevenueMapping.Count() != 0 ? userRevenueMapping.OrderByDescending(t =\u003E t.Sum(x =\u003E x.Item2)).First().Key.FullName : \u0022N/A\u0022)}\u0022, FinancialSummaryPanel, 1);\r\n            CreateLabel($\u0022Our total revenue from cancellations: {cancelAmount.ToString(\u0022#.##\u0022)}\u0022, FinancialSummaryPanel, 2);\r\n            CreateLabel($\u0022Total discounts from coupons: {totalDiscount.ToString(\u0022#.##\u0022)}\u0022, FinancialSummaryPanel, 3);\r\n            #endregion\r\n        }\r\n        public void page2()\r\n        {\r\n            Session6Entities entities = new Session6Entities();\r\n            ServiceDataGridView.DataSource = null;\r\n            AddonServicesPanel.Controls.Clear();\r\n            var addonServiceDetails = entities.AddonServiceDetails.ToList();\r\n            if (!String.IsNullOrWhiteSpace(FromDateTimePicker.Text))\r\n            {\r\n                addonServiceDetails = addonServiceDetails.Where(t =\u003E t.FromDate.Date \u003E= FromDateTimePicker.Value.Date).ToList();\r\n            }\r\n            if (!String.IsNullOrWhiteSpace(ToDateTimePicker.Text))\r\n            {\r\n                addonServiceDetails = addonServiceDetails.Where(t =\u003E t.FromDate.Date \u003C= ToDateTimePicker.Value.Date).ToList();\r\n            }\r\n            CreateLabel($\u0022Number of purchased services: {addonServiceDetails.Where(t =\u003E t.FromDate.Date \u003C= DateTime.Today.Date \u0026\u0026 !t.isRefund).Count()}\u0022, AddonServicesPanel, 0);\r\n\r\n            decimal totalRevenue = addonServiceDetails.Sum(t =\u003E\r\n            {\r\n                if (t.isRefund)\r\n                    return 0;\r\n                var amount = t.NumberOfPeople * t.Services.Price;\r\n                if (t.AddonServices.CouponID.HasValue)\r\n                {\r\n                    var discount = amount * (t.AddonServices.Coupons.DiscountPercent / 100);\r\n                    if (discount \u003E t.AddonServices.Coupons.MaximimDiscountAmount)\r\n                        discount = t.AddonServices.Coupons.MaximimDiscountAmount;\r\n                    amount -= discount;\r\n                }\r\n                return amount;\r\n            });\r\n            CreateLabel($\u0022Total revenue from service reservations: {totalRevenue.ToString(\u0022#.##\u0022)}\u0022, AddonServicesPanel, 1);\r\n            var mostBookedService = addonServiceDetails.GroupBy(t =\u003E t.Services).GroupBy(t =\u003E t.Count()).OrderByDescending(t =\u003E t.Key).FirstOrDefault();\r\n            CreateLabel($\u0022Most booked service: {(mostBookedService == null ? \u0022N/A\u0022 : String.Join(\u0022,\u0022, mostBookedService.Select(t =\u003E t.Key.Name)))}\u0022, AddonServicesPanel, 2);\r\n            List\u003Cobject\u003E dataSource = new List\u003Cobject\u003E();\r\n            var yearFilter = !String.IsNullOrWhiteSpace(ToDateTimePicker.Text) ? ToDateTimePicker.Value.Year : DateTime.Now.Year;\r\n            var fromMonth = !String.IsNullOrWhiteSpace(FromDateTimePicker.Text) ? FromDateTimePicker.Value.Month : 1;\r\n            var toMonth = !String.IsNullOrWhiteSpace(ToDateTimePicker.Text) ? ToDateTimePicker.Value.Month : 12;\r\n            foreach (var serviceType in entities.ServiceTypes.ToList())\r\n            {\r\n                List\u003Cint\u003E serviceMonthlyAvaiable = new List\u003Cint\u003E() { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };\r\n                for (int month = fromMonth; month \u003C= toMonth; month\u002B\u002B)\r\n                {\r\n                    bool avaiable = false;\r\n                    foreach (var service in serviceType.Services)\r\n                    {\r\n                        List\u003Cint\u003E timeRange = new List\u003Cint\u003E();\r\n                        if (service.DayOfMonth == \u0022*\u0022 || service.DayOfWeek == \u0022*\u0022)\r\n                            timeRange.AddRange(Enumerable.Range(1, DateTime.DaysInMonth(yearFilter, month)));\r\n                        if (!timeRange.Any())\r\n                        {\r\n                            var source = String.IsNullOrWhiteSpace(service.DayOfMonth) ? service.DayOfWeek : service.DayOfMonth;\r\n                            timeRange.AddRange(source.Split(\u0027,\u0027).Select(t =\u003E t.Split(\u0027-\u0027)).SelectMany(t =\u003E Enumerable.Range(Convert.ToInt32(t.First()), (Convert.ToInt32(t.Last()) - Convert.ToInt32(t.First())) \u002B 1)).OrderBy(t =\u003E t).ToList());\r\n                        }\r\n                        var details = service.AddonServiceDetails.Where(t =\u003E t.FromDate.Year == yearFilter \u0026\u0026 t.FromDate.Month == month \u0026\u0026 !t.isRefund).ToList();\r\n                        if (!String.IsNullOrWhiteSpace(service.DayOfWeek))\r\n                        {\r\n                            avaiable |= timeRange.Any(t =\u003E\r\n                            {\r\n                                var data = details.Where(x =\u003E x.FromDate.DayOfWeek == (DayOfWeek)t).ToList();\r\n                                if (data.Count() == 0)\r\n                                    return true;\r\n                                return data.Sum(x =\u003E x.NumberOfPeople) \u003C= service.DailyCap;\r\n                            });\r\n                        }\r\n                        if (!String.IsNullOrWhiteSpace(service.DayOfMonth))\r\n                        {\r\n                            avaiable |= timeRange.Any(t =\u003E\r\n                            {\r\n                                var data = details.Where(x =\u003E x.FromDate.Day == t).ToList();\r\n                                if (data.Count() == 0)\r\n                                    return true;\r\n                                return data.Sum(x =\u003E x.NumberOfPeople) \u003C= service.DailyCap;\r\n                            });\r\n                        }\r\n                    }\r\n                    serviceMonthlyAvaiable[month - 1] = Convert.ToInt32(avaiable);\r\n                }\r\n                dataSource.Add(new\r\n                {\r\n                    serviceType.Name,\r\n                    Jan = serviceMonthlyAvaiable[0].ToString(),\r\n                    Feb = serviceMonthlyAvaiable[1].ToString(),\r\n                    Mar = serviceMonthlyAvaiable[2].ToString(),\r\n                    Apr = serviceMonthlyAvaiable[3].ToString(),\r\n                    May = serviceMonthlyAvaiable[4].ToString(),\r\n                    Jun = serviceMonthlyAvaiable[5].ToString(),\r\n                    Jul = serviceMonthlyAvaiable[6].ToString(),\r\n                    Aug = serviceMonthlyAvaiable[7].ToString(),\r\n                    Sep = serviceMonthlyAvaiable[8].ToString(),\r\n                    Oct = serviceMonthlyAvaiable[9].ToString(),\r\n                    Nov = serviceMonthlyAvaiable[10].ToString(),\r\n                    Dec = serviceMonthlyAvaiable[11].ToString(),\r\n                });\r\n            }\r\n            ServiceDataGridView.DataSource = dataSource;\r\n            ServiceDataGridView.Columns[0].HeaderText = \u0022\u0022;\r\n        }\r\n        public void page3()\r\n        {\r\n            Session6Entities entities = new Session6Entities();\r\n            HostDataGridView.DataSource = null;\r\n            TransactionDataGridView.Rows.Clear();\r\n            TransactionTitleLabel.Text = null;\r\n            var tansactions = entities.Transactions.ToList();\r\n            var hosts = entities.Users.Where(t =\u003E t.Items.Any()).ToList();\r\n            if (!String.IsNullOrWhiteSpace(this.FromDateTimePicker.Text))\r\n            {\r\n                tansactions = tansactions.Where(t =\u003E t.TransactionDate.Date \u003E= this.FromDateTimePicker.Value.Date).ToList();\r\n            }\r\n            if (!String.IsNullOrWhiteSpace(this.ToDateTimePicker.Text))\r\n            {\r\n                tansactions = tansactions.Where(t =\u003E t.TransactionDate.Date \u003C= this.ToDateTimePicker.Value.Date).ToList();\r\n            }\r\n            if (!String.IsNullOrWhiteSpace(this.HostComboBox.Text))\r\n            {\r\n                hosts = hosts.Where(t =\u003E t.ID == (long)this.HostComboBox.SelectedValue).ToList();\r\n            }\r\n            List\u003CTuple\u003CUsers, decimal, decimal\u003E\u003E userRevenue = new List\u003CTuple\u003CUsers, decimal, decimal\u003E\u003E();\r\n            foreach (var transaction in tansactions)\r\n            {\r\n                foreach (var booking in transaction.Bookings)\r\n                {\r\n                    foreach (var bookingDetail in booking.BookingDetails)\r\n                    {\r\n                        if (!String.IsNullOrWhiteSpace(this.HostComboBox.Text)\r\n                            \u0026\u0026 bookingDetail.ItemPrices.Items.UserID == (long)this.HostComboBox.SelectedValue)\r\n                        {\r\n                            continue;\r\n                        }\r\n                        if (!String.IsNullOrWhiteSpace(this.GuestComboBox.Text)\r\n                            \u0026\u0026 booking.UserID == (long)this.GuestComboBox.SelectedValue)\r\n                        {\r\n                            continue;\r\n                        }\r\n                        decimal commission = bookingDetail.ItemPrices.Price * (bookingDetail.ItemPrices.CancellationPolicies.Commission / 100);\r\n                        decimal total = bookingDetail.ItemPrices.Price;\r\n                        if (booking.CouponID.HasValue)\r\n                        {\r\n                            decimal discount = bookingDetail.ItemPrices.Price * (booking.Coupons.DiscountPercent / 100);\r\n                            if (discount \u003E booking.Coupons.MaximimDiscountAmount)\r\n                            {\r\n                                discount = booking.Coupons.MaximimDiscountAmount;\r\n                            }\r\n                            total -= discount;\r\n                        }\r\n                        if (bookingDetail.isRefund)\r\n                        {\r\n                            total = 0;\r\n                            var dayLeft = (bookingDetail.ItemPrices.Date - bookingDetail.RefundDate.Value).Days;\r\n                            var fee = entities.CancellationRefundFees\r\n                                .FirstOrDefault(t =\u003E t.CancellationPolicyID == bookingDetail.RefundCancellationPoliciyID\r\n                                    \u0026\u0026 t.DaysLeft == dayLeft);\r\n                            if (fee != null)\r\n                            {\r\n                                var refundAmount = bookingDetail.ItemPrices.Price * (fee.PenaltyPercentage / 100) / 2;\r\n                                total = refundAmount;\r\n                            }\r\n                        }\r\n                        userRevenue.Add(new Tuple\u003CUsers, decimal, decimal\u003E(bookingDetail.ItemPrices.Items.Users, total, commission));\r\n                    }\r\n                }\r\n            }\r\n            this.HostDataGridView.DataSource = hosts.Select(t =\u003E\r\n            {\r\n                var total = userRevenue.Where(x =\u003E x.Item1.ID == t.ID).Sum(x =\u003E x.Item2);\r\n                var commission = userRevenue.Where(x =\u003E x.Item1.ID == t.ID).Sum(x =\u003E x.Item3);\r\n                var net = total - commission;\r\n                var withdrawData = tansactions.Where(x =\u003E x.UserID == t.ID \u0026\u0026 x.TransactionTypeID == 2).ToList();\r\n                return new\r\n                {\r\n                    t.ID,\r\n                    t.FullName,\r\n                    TotalRevenue = \u0022$\u0022 \u002B total,\r\n                    NetRevenun = \u0022$\u0022 \u002B net,\r\n                    RemainingBalance = \u0022$\u0022 \u002B (total - withdrawData.Sum(x =\u003E x.Amount)),\r\n                    LastWithdrawal = withdrawData.LastOrDefault()?.TransactionDate.ToString(\u0022yyyy-MM-dd\u0022) ?? \u0022\u0022\r\n                };\r\n            }).ToList();\r\n        }\r\n        public void CreateLabel(string text, Control control, int index)\r\n        {\r\n            Label label = new Label()\r\n            {\r\n                Text = text,\r\n                AutoSize = true,\r\n                Location = new Point(15, (index \u002B 1) * 30),\r\n                Font = base.Font\r\n            };\r\n            control.Controls.Add(label);\r\n        }\r\n        private void ServiceDataGridView_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)\r\n        {\r\n            if (e.ColumnIndex \u003C 1)\r\n                return;\r\n            int value = Convert.ToInt32(e.Value);\r\n            e.Value = \u0022\u0022;\r\n            if (value == 1)\r\n                e.CellStyle.BackColor = Color.FromArgb(229, 26, 46);\r\n            else if (value == 2)\r\n                ServiceDataGridView.Columns[e.ColumnIndex].HeaderText = \u0022\u0022;\r\n        }\r\n        private void HostDataGridView_CellClick(object sender, DataGridViewCellEventArgs e)\r\n        {\r\n            if (e.RowIndex \u003C 0)\r\n            {\r\n                return;\r\n            }\r\n            this.TransactionTitleLabel.Text = $\u0022Transaction detail for {this.HostDataGridView.Rows[e.RowIndex].Cells[1].Value.ToString()}\u0022;\r\n            this.TransactionDataGridView.Rows.Clear();\r\n\r\n            long hostId = (long)this.HostDataGridView.Rows[e.RowIndex].Cells[0].Value;\r\n\r\n            using (Session6Entities entities = new Session6Entities())\r\n            {\r\n                var bookings = entities.Bookings.ToList();\r\n                if (!String.IsNullOrWhiteSpace(this.FromDateTimePicker.Text))\r\n                {\r\n                    bookings = bookings.Where(t =\u003E t.BookingDate.Date \u003E= this.FromDateTimePicker.Value.Date).ToList();\r\n                }\r\n                if (!String.IsNullOrWhiteSpace(this.ToDateTimePicker.Text))\r\n                {\r\n                    bookings = bookings.Where(t =\u003E t.BookingDate.Date \u003C= this.ToDateTimePicker.Value.Date).ToList();\r\n                }\r\n                if (!String.IsNullOrWhiteSpace(this.GuestComboBox.Text))\r\n                {\r\n                    bookings = bookings.Where(t =\u003E t.UserID == (long)this.GuestComboBox.SelectedValue).ToList();\r\n                }\r\n\r\n                foreach (var booking in bookings.Where(t =\u003E t.BookingDetails.All(x =\u003E x.ItemPrices.Items.UserID == hostId)).OrderBy(t =\u003E t.BookingDate))\r\n                {\r\n                    List\u003CBookingDetails\u003E refundDetails = new List\u003CBookingDetails\u003E();\r\n                    foreach (var bookingDetailGropping in booking.BookingDetails.GroupBy(t =\u003E t.ItemPrices.Items))\r\n                    {\r\n                        decimal amount = 0;\r\n                        decimal commission = 0;\r\n                        var bookingDetailGroppingOrderBy = bookingDetailGropping.OrderBy(t =\u003E t.ItemPrices.Date);\r\n                        foreach (var bookingDetails in bookingDetailGroppingOrderBy)\r\n                        {\r\n                            if (bookingDetails.isRefund)\r\n                            {\r\n                                refundDetails.Add(bookingDetails);\r\n                            }\r\n\r\n                            decimal value = bookingDetails.ItemPrices.Price;\r\n                            commission \u002B= bookingDetails.ItemPrices.Price * (bookingDetails.ItemPrices.CancellationPolicies.Commission / 100);\r\n                            if (booking.CouponID.HasValue)\r\n                            {\r\n                                var discount = bookingDetails.ItemPrices.Price * (booking.Coupons.DiscountPercent / 100);\r\n                                if (discount \u003E booking.Coupons.MaximimDiscountAmount)\r\n                                {\r\n                                    discount = booking.Coupons.MaximimDiscountAmount;\r\n                                }\r\n                                value -= discount;\r\n                            }\r\n                            amount \u002B= value;\r\n                        }\r\n                        this.TransactionDataGridView.Rows.Add(booking.Transactions.TransactionDate.ToString(\u0022yyyy-MM-dd\u0022),\r\n                            \u0022$\u0022 \u002B amount,\r\n                            \u0022$\u0022 \u002B commission,\r\n                            $\u0022Reserve {bookingDetailGroppingOrderBy.First().ItemPrices.Items.Title} from {bookingDetailGroppingOrderBy.First().ItemPrices.Date.ToString(\u0022yyyy-MM-dd\u0022)} - {bookingDetailGroppingOrderBy.Last().ItemPrices.Date.ToString(\u0022yyyy-MM-dd\u0022)}\u0022);\r\n                    }\r\n\r\n                    List\u003CBookingDetails\u003E current = new List\u003CBookingDetails\u003E();\r\n                    List\u003CList\u003CBookingDetails\u003E\u003E refundGropping = new List\u003CList\u003CBookingDetails\u003E\u003E();\r\n                    for (int i = 0; i \u003C refundDetails.Count(); i\u002B\u002B)\r\n                    {\r\n                        if (i == 0)\r\n                        {\r\n                            current.Add(refundDetails[i]);\r\n                            if (i == refundDetails.Count() - 1)\r\n                            {\r\n                                refundGropping.Add(current);\r\n                            }\r\n                            continue;\r\n                        }\r\n                        if (refundDetails[i].ItemPrices.Date.Date == refundDetails[i - 1].ItemPrices.Date.AddDays(1).Date)\r\n                        {\r\n                            current.Add(refundDetails[i]);\r\n                            if (i == refundDetails.Count() - 1)\r\n                            {\r\n                                refundGropping.Add(current);\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n\r\n                            refundGropping.Add(current);\r\n                            current = new List\u003CBookingDetails\u003E() { refundDetails[i] };\r\n                            if (i == refundDetails.Count() - 1)\r\n                            {\r\n                                refundGropping.Add(current);\r\n                            }\r\n                        }\r\n                    }\r\n                    foreach (var refunds in refundGropping)\r\n                    {\r\n                        decimal amount = 0;\r\n                        decimal commission = 0;\r\n                        refunds.ForEach(t =\u003E\r\n                        {\r\n                            decimal value = t.ItemPrices.Price;\r\n                            if (booking.CouponID.HasValue)\r\n                            {\r\n                                var discount = value * (booking.Coupons.DiscountPercent / 100);\r\n                                if (discount \u003E booking.Coupons.MaximimDiscountAmount)\r\n                                {\r\n                                    discount = booking.Coupons.MaximimDiscountAmount;\r\n                                }\r\n                                value -= discount;\r\n                            }\r\n                            amount \u002B= value;\r\n\r\n                            var dayLeft = (t.ItemPrices.Date - t.RefundDate.Value).Days;\r\n                            var fee = entities.CancellationRefundFees\r\n                                .FirstOrDefault(x =\u003E x.CancellationPolicyID == t.RefundCancellationPoliciyID\r\n                                    \u0026\u0026 x.DaysLeft == dayLeft);\r\n                            if (fee != null)\r\n                            {\r\n                                var refundAmount = t.ItemPrices.Price * (fee.PenaltyPercentage / 100) / 2;\r\n                                commission \u002B= refundAmount;\r\n                            }\r\n                        });\r\n                        this.TransactionDataGridView.Rows.Add(booking.Transactions.TransactionDate.ToString(\u0022yyyy-MM-dd\u0022),\r\n                            \u0022$\u0022 \u002B amount,\r\n                            \u0022$\u0022 \u002B commission,\r\n                            $\u0022Cancel Reserve {refunds.First().ItemPrices.Items.Title} from {refunds.First().ItemPrices.Date.ToString(\u0022yyyy-MM-dd\u0022)} - {refunds.Last().ItemPrices.Date.ToString(\u0022yyyy-MM-dd\u0022)}\u0022);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","Selections":[{"Caret":0,"Start":0,"End":31392}],"FilePath":"C:\\Users\\USER\\Documents\\GitHub\\Practise\\\u570B\u969B\u8CFD\\First\\Session6\\Session6\\Session6\\Main.cs","Language":"C#"}],"PreSelectedSkill":null,"CorrelationId":{"Guid":"5663625b-ef2d-41d1-9dcd-2c30d98ac59d"}}},"Response":{"Content":"In C#, \u0060define\u0060 is a preprocessor directive that allows you to create a constant value that can be used throughout your code, including in conditional compilation statements. You can define a symbol using the \u0060#define\u0060 directive, which should be placed at the beginning of the file (outside of all namespaces and classes). \r\n\r\nHere\u0027s an example:\r\n\u0060\u0060\u0060csharp\r\n#define MY_CONSTANT \r\n#if MY_CONSTANT \r\n    Console.WriteLine(\u0022Defined!\u0022);\r\n#else \r\n    Console.WriteLine(\u0022Not Defined!\u0022);\r\n#endif \r\n\u0060\u0060\u0060\r\nThe above example will output \u0060Defined!\u0060 because \u0060MY_CONSTANT\u0060 is defined. Alternatively, if it wasn\u0027t defined, the output would be \u0060Not Defined!\u0060.\r\n\r\nPossible ways to optimize this code would be to use symbols that convey their meaning more clearly, and to avoid redefining the symbol in places other than the main file.","Type":0,"Status":1,"FollowUpPrompts":["What other preprocessor directives are there?","How can I check if a symbol is defined?"]},"SelectedFunctionName":"Answer","LoggedSkillInvocations":null}
{"version":1,"Request":{"Prompt":"define for C# have any program?","Context":{"VisibleDocuments":[{"Content":"using System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.Data;\r\nusing System.Diagnostics;\r\nusing System.Drawing;\r\nusing System.Globalization;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Windows.Forms;\r\nnamespace Session6\r\n{\r\n    public partial class Main : Form\r\n    {\r\n\r\n        public Main()\r\n        {\r\n            InitializeComponent();\r\n            init();\r\n        }\r\n        public void init()\r\n        {\r\n            Session6Entities entities = new Session6Entities();\r\n            FromDateTimePicker.CustomFormat = \u0022 \u0022;\r\n            ToDateTimePicker.CustomFormat = \u0022 \u0022;\r\n            var areaData = entities.Areas.Select(t =\u003E new { t.ID, t.Name }).ToList();\r\n            areaData.Insert(0, new { ID = (long)-1, Name = \u0022\u0022 });\r\n            AreaComboBox.DataSource = areaData;\r\n            AreaComboBox.DisplayMember = \u0022Name\u0022;\r\n            AreaComboBox.ValueMember = \u0022ID\u0022;\r\n            var hostData = entities.Users.Where(t =\u003E t.Items.Any()).Select(t =\u003E new { t.ID, t.FullName }).OrderBy(t =\u003E t.FullName).ToList();\r\n            hostData.Insert(0, new { ID = (long)-1, FullName = \u0022\u0022 });\r\n            HostComboBox.DataSource = hostData;\r\n            HostComboBox.DisplayMember = \u0022FullName\u0022;\r\n            HostComboBox.ValueMember = \u0022ID\u0022;\r\n            var guestData = entities.Users.Where(t =\u003E t.Bookings.Any()).OrderBy(t =\u003E t.Items.Count()).ToList().Reverse\u003CUsers\u003E().Select(t =\u003E new { t.ID, t.FullName }).ToList();\r\n            guestData.Insert(0, new { ID = (long)-1, FullName = \u0022\u0022 });\r\n            GuestComboBox.DataSource = guestData;\r\n            GuestComboBox.DisplayMember = \u0022FullName\u0022;\r\n            GuestComboBox.ValueMember = \u0022ID\u0022;\r\n        }\r\n        private void FromDateTimePicker_ValueChanged(object sender, EventArgs e)\r\n        {\r\n            ((DateTimePicker)sender).Format = DateTimePickerFormat.Custom;\r\n            ((DateTimePicker)sender).CustomFormat = \u0022yyyy-MM-dd\u0022;\r\n        }\r\n        private void ResetBtn_Click(object sender, EventArgs e) =\u003E init();\r\n        private void ApplyBtn_Click(object sender, EventArgs e)\r\n        {\r\n            if (!String.IsNullOrWhiteSpace(FromDateTimePicker.Text) \u0026\u0026 !String.IsNullOrWhiteSpace(ToDateTimePicker.Text))\r\n            {\r\n                if (FromDateTimePicker.Value.Date \u003E ToDateTimePicker.Value.Date)\r\n                {\r\n                    MessageBox.Show(\u0022From date can\u0027t over To date.\u0022);\r\n                    return;\r\n                }\r\n            }\r\n            if (TabControlMain.SelectedIndex == 0)\r\n                page1();\r\n            if (TabControlMain.SelectedIndex == 1)\r\n                page2();\r\n            if (TabControlMain.SelectedIndex == 2)\r\n                page3();\r\n        }\r\n        public void page1()\r\n        {\r\n            Session6Entities entities = new Session6Entities();\r\n            ListingsSummaryPanel.Controls.Clear();\r\n            ScoresSummaryPanel.Controls.Clear();\r\n            FinancialSummaryPanel.Controls.Clear();\r\n            chart.Series[0].Points.Clear();\r\n            chart.Series[1].Points.Clear();\r\n            var items = entities.Items.ToList();\r\n            var itemPrices = entities.ItemPrices.ToList();\r\n            var transactions = entities.Transactions.ToList();\r\n            var bookingDetails = entities.BookingDetails.ToList();\r\n            if (!String.IsNullOrWhiteSpace(FromDateTimePicker.Text))\r\n            {\r\n                itemPrices = itemPrices.Where(t =\u003E t.Date.Date \u003E= FromDateTimePicker.Value.Date).ToList();\r\n                transactions = transactions.Where(t =\u003E t.TransactionDate.Date \u003E= FromDateTimePicker.Value.Date).ToList();\r\n            }\r\n            if (!String.IsNullOrWhiteSpace(ToDateTimePicker.Text))\r\n            {\r\n                itemPrices = itemPrices.Where(t =\u003E t.Date.Date \u003C= ToDateTimePicker.Value.Date).ToList();\r\n                transactions = transactions.Where(t =\u003E t.TransactionDate.Date \u003C= ToDateTimePicker.Value.Date).ToList();\r\n            }\r\n            if (!String.IsNullOrWhiteSpace(AreaComboBox.Text))\r\n            {\r\n                var areaId = (long)AreaComboBox.SelectedValue;\r\n                items = items.Where(t =\u003E t.AreaID == areaId).ToList();\r\n                itemPrices = itemPrices.Where(t =\u003E t.Items.AreaID == areaId).ToList();\r\n            }\r\n            if (!String.IsNullOrWhiteSpace(HostComboBox.Text))\r\n            {\r\n                var hostId = (long)HostComboBox.SelectedValue;\r\n                items = items.Where(t =\u003E t.UserID == hostId).ToList();\r\n                itemPrices = itemPrices.Where(t =\u003E t.Items.UserID == hostId).ToList();\r\n                transactions = transactions.Where(t =\u003E t.UserID == hostId).ToList();\r\n            }\r\n            if (!String.IsNullOrWhiteSpace(GuestComboBox.Text))\r\n            {\r\n                var guestId = (long)GuestComboBox.SelectedValue;\r\n                transactions = transactions.Where(t =\u003E t.UserID == guestId).ToList();\r\n                bookingDetails = bookingDetails.Where(t =\u003E t.Bookings.UserID == guestId).ToList();\r\n            }\r\n            #region Property or listing summary\r\n            var completeBooked = bookingDetails.Where(t =\u003E !t.isRefund \u0026\u0026 t.ItemPrices.Date.Date \u003C DateTime.Now.Date).ToList();\r\n            CreateLabel($\u0022Secured Bookings: {completeBooked.Count()}\u0022, ListingsSummaryPanel, 0);\r\n            var ppcomingBooked = bookingDetails\r\n                .Where(t =\u003E !t.isRefund \u0026\u0026 t.ItemPrices.Date.Date \u003E= DateTime.Now.Date).ToList();\r\n            CreateLabel($\u0022Upcoming Bookings(reservations): {ppcomingBooked.Count()}\u0022, ListingsSummaryPanel, 1);\r\n            var mostBookedDate = completeBooked.GroupBy(t =\u003E t.ItemPrices.Date.DayOfWeek).OrderByDescending(t =\u003E t.Count()).FirstOrDefault();\r\n            CreateLabel($\u0022Most booked day of week: {(mostBookedDate != null ? mostBookedDate.Key.ToString() : \u0022N/A\u0022)}\u0022, ListingsSummaryPanel, 2);\r\n            var inactiveItems = items.Where(t =\u003E !t.ItemPrices.Any()).ToList();\r\n            CreateLabel($\u0022Inactive listings or properties: {inactiveItems.Count()}\u0022, ListingsSummaryPanel, 3);\r\n            var coupons = bookingDetails.Where(t =\u003E t.Bookings.CouponID.HasValue).GroupBy(t =\u003E t.Bookings.Coupons).Select(t =\u003E new { Name = t.Key.CouponCode, Count = t.Count() }).GroupBy(t =\u003E t.Count).OrderByDescending(t =\u003E t.Key).FirstOrDefault();\r\n            CreateLabel($\u0022Most used coupon:  {(coupons == null ? \u0022N/A\u0022 : String.Join(\u0022,\u0022, coupons.Select(t =\u003E t.Name)))}\u0022, ListingsSummaryPanel, 4);\r\n            var vacancy = itemPrices.Where(t =\u003E !t.BookingDetails.Any() || t.BookingDetails.All(x =\u003E x.isRefund)).ToList();\r\n            CreateLabel($\u0022Vacancy ratio: {vacancy.Count()}/{itemPrices.Count()}\u0022, ListingsSummaryPanel, 5);\r\n            #endregion\r\n            #region Scores Summary\r\n            var AverageScore = items.Where(x =\u003E x.ItemScores.Any()).SelectMany(x =\u003E x.ItemScores);\r\n            CreateLabel($\u0022Average score for listings:  {(AverageScore.Any() ? AverageScore.Average(t =\u003E t.Value).ToString(\u0022#.##\u0022) : \u0022N/A\u0022)}\u0022, ScoresSummaryPanel, 0);\r\n            var hightscore = items.Where(t =\u003E t.ItemScores.Any()).Select(t =\u003E new { Name = t.Title, Score = t.ItemScores.Average(x =\u003E x.Value) }).OrderByDescending(t =\u003E t.Score).FirstOrDefault();\r\n            CreateLabel($\u0022Name of listing with highest score:  {(hightscore == null ? \u0022N/A\u0022 : hightscore.Name)}\u0022, ScoresSummaryPanel, 1);\r\n            var topScoreUser = items.Where(t =\u003E t.ItemScores.Any()).Select(t =\u003E new { Name = t.Users.FullName, Score = t.ItemScores.Average(x =\u003E x.Value) }).GroupBy(t =\u003E t.Score).OrderByDescending(t =\u003E t.Key).FirstOrDefault();\r\n            CreateLabel($\u0022Top owner / manager by average score: {(topScoreUser == null ? \u0022N/A\u0022 : String.Join(\u0022,\u0022, topScoreUser.Select(t =\u003E t.Name)))}\u0022, ScoresSummaryPanel, 2);\r\n            var leastScoreUser = items.Where(t =\u003E t.ItemScores.Any()).Select(t =\u003E new { Name = t.Users.FullName, Score = t.ItemScores.Average(x =\u003E x.Value) }).GroupBy(t =\u003E t.Score).OrderBy(t =\u003E t.Key).FirstOrDefault();\r\n            CreateLabel($\u0022The least clean owner / manager:   {(leastScoreUser == null ? \u0022N/A\u0022 : String.Join(\u0022,\u0022, leastScoreUser.Select(t =\u003E t.Name)))}\u0022, ScoresSummaryPanel, 3);\r\n            #endregion\r\n            #region Monthly Vacancy Ratio:\r\n            var timefiler = !String.IsNullOrWhiteSpace(ToDateTimePicker.Text) ? ToDateTimePicker.Value : DateTime.Now;\r\n            var start = new DateTime(timefiler.AddMonths(-2).Year, timefiler.AddMonths(-2).Month, 1);\r\n            var end = new DateTime(timefiler.Year, timefiler.Month, DateTime.DaysInMonth(timefiler.Year, timefiler.Month));\r\n            for (DateTime temp = start; temp \u003C end; temp = temp.AddMonths(1))\r\n            {\r\n                DateTime nextMonth = temp.AddMonths(1);\r\n                var data = itemPrices.Where(t =\u003E t.Date \u003E= temp \u0026\u0026 t.Date \u003C nextMonth).ToList();\r\n                chart.Series[0].Points.AddXY(temp.Date.ToString(\u0022MMM\u0022, new CultureInfo(\u0022en-US\u0022)), data.Count(t =\u003E !t.BookingDetails.Any() || t.BookingDetails.All(x =\u003E x.isRefund)));\r\n                chart.Series[1].Points.AddXY(temp.Date.ToString(\u0022MMM\u0022, new CultureInfo(\u0022en-US\u0022)), data.Count(t =\u003E t.BookingDetails.Any(x =\u003E !x.isRefund)));\r\n            }\r\n            #endregion\r\n            #region Financial Summary\r\n            decimal cancelAmount = 0;\r\n            decimal totalDiscount = 0;\r\n            List\u003CTuple\u003CUsers, decimal\u003E\u003E userRevenue = new List\u003CTuple\u003CUsers, decimal\u003E\u003E();\r\n            foreach (var transaction in transactions)\r\n            {\r\n                foreach (var booking in transaction.Bookings)\r\n                {\r\n                    foreach (var bookingDetail in booking.BookingDetails)\r\n                    {\r\n                        if (!String.IsNullOrWhiteSpace(HostComboBox.Text)\r\n                            \u0026\u0026 bookingDetail.ItemPrices.Items.UserID == (long)HostComboBox.SelectedValue)\r\n                        {\r\n                            continue;\r\n                        }\r\n                        if (!String.IsNullOrWhiteSpace(GuestComboBox.Text)\r\n                            \u0026\u0026 booking.UserID == (long)GuestComboBox.SelectedValue)\r\n                        {\r\n                            continue;\r\n                        }\r\n                        decimal total = bookingDetail.ItemPrices.Price -\r\n                            bookingDetail.ItemPrices.Price * (bookingDetail.ItemPrices.CancellationPolicies.Commission / 100);\r\n                        if (booking.CouponID.HasValue)\r\n                        {\r\n                            decimal discount = bookingDetail.ItemPrices.Price * (booking.Coupons.DiscountPercent / 100);\r\n                            if (discount \u003E booking.Coupons.MaximimDiscountAmount)\r\n                            {\r\n                                discount = booking.Coupons.MaximimDiscountAmount;\r\n                            }\r\n                            total -= discount;\r\n                            totalDiscount \u002B= discount;\r\n                        }\r\n                        if (bookingDetail.isRefund)\r\n                        {\r\n                            total = 0;\r\n                            var dayLeft = (bookingDetail.ItemPrices.Date - bookingDetail.RefundDate.Value).Days;\r\n                            var fee = entities.CancellationRefundFees\r\n                                .FirstOrDefault(t =\u003E t.CancellationPolicyID == bookingDetail.RefundCancellationPoliciyID\r\n                                    \u0026\u0026 t.DaysLeft == dayLeft);\r\n                            if (fee != null)\r\n                            {\r\n                                var refundAmount = bookingDetail.ItemPrices.Price * (fee.PenaltyPercentage / 100) / 2;\r\n                                cancelAmount \u002B= refundAmount;\r\n                                total = refundAmount;\r\n                            }\r\n                        }\r\n                        userRevenue.Add(new Tuple\u003CUsers, decimal\u003E(booking.Users, total));\r\n                    }\r\n                }\r\n            }\r\n            var userRevenueMapping = userRevenue.GroupBy(t =\u003E t.Item1).ToList();\r\n            CreateLabel($\u0022Average net revenue of all owners / managers: {(userRevenueMapping.Count() != 0 ? userRevenueMapping.Average(t =\u003E t.Sum(x =\u003E x.Item2)).ToString(\u0022#.##\u0022) : \u00220\u0022)}\u0022, FinancialSummaryPanel, 0);\r\n            CreateLabel($\u0022Highest net revenue for an owner / manager: \u0022 \u002B $\u0022{(userRevenueMapping.Count() != 0 ? userRevenueMapping.OrderByDescending(t =\u003E t.Sum(x =\u003E x.Item2)).First().Key.FullName : \u0022N/A\u0022)}\u0022, FinancialSummaryPanel, 1);\r\n            CreateLabel($\u0022Our total revenue from cancellations: {cancelAmount.ToString(\u0022#.##\u0022)}\u0022, FinancialSummaryPanel, 2);\r\n            CreateLabel($\u0022Total discounts from coupons: {totalDiscount.ToString(\u0022#.##\u0022)}\u0022, FinancialSummaryPanel, 3);\r\n            #endregion\r\n        }\r\n        public void page2()\r\n        {\r\n            Session6Entities entities = new Session6Entities();\r\n            ServiceDataGridView.DataSource = null;\r\n            AddonServicesPanel.Controls.Clear();\r\n            var addonServiceDetails = entities.AddonServiceDetails.ToList();\r\n            if (!String.IsNullOrWhiteSpace(FromDateTimePicker.Text))\r\n            {\r\n                addonServiceDetails = addonServiceDetails.Where(t =\u003E t.FromDate.Date \u003E= FromDateTimePicker.Value.Date).ToList();\r\n            }\r\n            if (!String.IsNullOrWhiteSpace(ToDateTimePicker.Text))\r\n            {\r\n                addonServiceDetails = addonServiceDetails.Where(t =\u003E t.FromDate.Date \u003C= ToDateTimePicker.Value.Date).ToList();\r\n            }\r\n            CreateLabel($\u0022Number of purchased services: {addonServiceDetails.Where(t =\u003E t.FromDate.Date \u003C= DateTime.Today.Date \u0026\u0026 !t.isRefund).Count()}\u0022, AddonServicesPanel, 0);\r\n\r\n            decimal totalRevenue = addonServiceDetails.Sum(t =\u003E\r\n            {\r\n                if (t.isRefund)\r\n                    return 0;\r\n                var amount = t.NumberOfPeople * t.Services.Price;\r\n                if (t.AddonServices.CouponID.HasValue)\r\n                {\r\n                    var discount = amount * (t.AddonServices.Coupons.DiscountPercent / 100);\r\n                    if (discount \u003E t.AddonServices.Coupons.MaximimDiscountAmount)\r\n                        discount = t.AddonServices.Coupons.MaximimDiscountAmount;\r\n                    amount -= discount;\r\n                }\r\n                return amount;\r\n            });\r\n            CreateLabel($\u0022Total revenue from service reservations: {totalRevenue.ToString(\u0022#.##\u0022)}\u0022, AddonServicesPanel, 1);\r\n            var mostBookedService = addonServiceDetails.GroupBy(t =\u003E t.Services).GroupBy(t =\u003E t.Count()).OrderByDescending(t =\u003E t.Key).FirstOrDefault();\r\n            CreateLabel($\u0022Most booked service: {(mostBookedService == null ? \u0022N/A\u0022 : String.Join(\u0022,\u0022, mostBookedService.Select(t =\u003E t.Key.Name)))}\u0022, AddonServicesPanel, 2);\r\n            List\u003Cobject\u003E dataSource = new List\u003Cobject\u003E();\r\n            var yearFilter = !String.IsNullOrWhiteSpace(ToDateTimePicker.Text) ? ToDateTimePicker.Value.Year : DateTime.Now.Year;\r\n            var fromMonth = !String.IsNullOrWhiteSpace(FromDateTimePicker.Text) ? FromDateTimePicker.Value.Month : 1;\r\n            var toMonth = !String.IsNullOrWhiteSpace(ToDateTimePicker.Text) ? ToDateTimePicker.Value.Month : 12;\r\n            foreach (var serviceType in entities.ServiceTypes.ToList())\r\n            {\r\n                List\u003Cint\u003E serviceMonthlyAvaiable = new List\u003Cint\u003E() { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };\r\n                for (int month = fromMonth; month \u003C= toMonth; month\u002B\u002B)\r\n                {\r\n                    bool avaiable = false;\r\n                    foreach (var service in serviceType.Services)\r\n                    {\r\n                        List\u003Cint\u003E timeRange = new List\u003Cint\u003E();\r\n                        if (service.DayOfMonth == \u0022*\u0022 || service.DayOfWeek == \u0022*\u0022)\r\n                            timeRange.AddRange(Enumerable.Range(1, DateTime.DaysInMonth(yearFilter, month)));\r\n                        if (!timeRange.Any())\r\n                        {\r\n                            var source = String.IsNullOrWhiteSpace(service.DayOfMonth) ? service.DayOfWeek : service.DayOfMonth;\r\n                            timeRange.AddRange(source.Split(\u0027,\u0027).Select(t =\u003E t.Split(\u0027-\u0027)).SelectMany(t =\u003E Enumerable.Range(Convert.ToInt32(t.First()), (Convert.ToInt32(t.Last()) - Convert.ToInt32(t.First())) \u002B 1)).OrderBy(t =\u003E t).ToList());\r\n                        }\r\n                        var details = service.AddonServiceDetails.Where(t =\u003E t.FromDate.Year == yearFilter \u0026\u0026 t.FromDate.Month == month \u0026\u0026 !t.isRefund).ToList();\r\n                        if (!String.IsNullOrWhiteSpace(service.DayOfWeek))\r\n                        {\r\n                            avaiable |= timeRange.Any(t =\u003E\r\n                            {\r\n                                var data = details.Where(x =\u003E x.FromDate.DayOfWeek == (DayOfWeek)t).ToList();\r\n                                if (data.Count() == 0)\r\n                                    return true;\r\n                                return data.Sum(x =\u003E x.NumberOfPeople) \u003C= service.DailyCap;\r\n                            });\r\n                        }\r\n                        if (!String.IsNullOrWhiteSpace(service.DayOfMonth))\r\n                        {\r\n                            avaiable |= timeRange.Any(t =\u003E\r\n                            {\r\n                                var data = details.Where(x =\u003E x.FromDate.Day == t).ToList();\r\n                                if (data.Count() == 0)\r\n                                    return true;\r\n                                return data.Sum(x =\u003E x.NumberOfPeople) \u003C= service.DailyCap;\r\n                            });\r\n                        }\r\n                    }\r\n                    serviceMonthlyAvaiable[month - 1] = Convert.ToInt32(avaiable);\r\n                }\r\n                dataSource.Add(new\r\n                {\r\n                    serviceType.Name,\r\n                    Jan = serviceMonthlyAvaiable[0].ToString(),\r\n                    Feb = serviceMonthlyAvaiable[1].ToString(),\r\n                    Mar = serviceMonthlyAvaiable[2].ToString(),\r\n                    Apr = serviceMonthlyAvaiable[3].ToString(),\r\n                    May = serviceMonthlyAvaiable[4].ToString(),\r\n                    Jun = serviceMonthlyAvaiable[5].ToString(),\r\n                    Jul = serviceMonthlyAvaiable[6].ToString(),\r\n                    Aug = serviceMonthlyAvaiable[7].ToString(),\r\n                    Sep = serviceMonthlyAvaiable[8].ToString(),\r\n                    Oct = serviceMonthlyAvaiable[9].ToString(),\r\n                    Nov = serviceMonthlyAvaiable[10].ToString(),\r\n                    Dec = serviceMonthlyAvaiable[11].ToString(),\r\n                });\r\n            }\r\n            ServiceDataGridView.DataSource = dataSource;\r\n            ServiceDataGridView.Columns[0].HeaderText = \u0022\u0022;\r\n        }\r\n        public void page3()\r\n        {\r\n            Session6Entities entities = new Session6Entities();\r\n            HostDataGridView.DataSource = null;\r\n            TransactionDataGridView.Rows.Clear();\r\n            TransactionTitleLabel.Text = null;\r\n            var tansactions = entities.Transactions.ToList();\r\n            var hosts = entities.Users.Where(t =\u003E t.Items.Any()).ToList();\r\n            if (!String.IsNullOrWhiteSpace(this.FromDateTimePicker.Text))\r\n            {\r\n                tansactions = tansactions.Where(t =\u003E t.TransactionDate.Date \u003E= this.FromDateTimePicker.Value.Date).ToList();\r\n            }\r\n            if (!String.IsNullOrWhiteSpace(this.ToDateTimePicker.Text))\r\n            {\r\n                tansactions = tansactions.Where(t =\u003E t.TransactionDate.Date \u003C= this.ToDateTimePicker.Value.Date).ToList();\r\n            }\r\n            if (!String.IsNullOrWhiteSpace(this.HostComboBox.Text))\r\n            {\r\n                hosts = hosts.Where(t =\u003E t.ID == (long)this.HostComboBox.SelectedValue).ToList();\r\n            }\r\n            List\u003CTuple\u003CUsers, decimal, decimal\u003E\u003E userRevenue = new List\u003CTuple\u003CUsers, decimal, decimal\u003E\u003E();\r\n            foreach (var transaction in tansactions)\r\n            {\r\n                foreach (var booking in transaction.Bookings)\r\n                {\r\n                    foreach (var bookingDetail in booking.BookingDetails)\r\n                    {\r\n                        if (!String.IsNullOrWhiteSpace(this.HostComboBox.Text)\r\n                            \u0026\u0026 bookingDetail.ItemPrices.Items.UserID == (long)this.HostComboBox.SelectedValue)\r\n                        {\r\n                            continue;\r\n                        }\r\n                        if (!String.IsNullOrWhiteSpace(this.GuestComboBox.Text)\r\n                            \u0026\u0026 booking.UserID == (long)this.GuestComboBox.SelectedValue)\r\n                        {\r\n                            continue;\r\n                        }\r\n                        decimal commission = bookingDetail.ItemPrices.Price * (bookingDetail.ItemPrices.CancellationPolicies.Commission / 100);\r\n                        decimal total = bookingDetail.ItemPrices.Price;\r\n                        if (booking.CouponID.HasValue)\r\n                        {\r\n                            decimal discount = bookingDetail.ItemPrices.Price * (booking.Coupons.DiscountPercent / 100);\r\n                            if (discount \u003E booking.Coupons.MaximimDiscountAmount)\r\n                            {\r\n                                discount = booking.Coupons.MaximimDiscountAmount;\r\n                            }\r\n                            total -= discount;\r\n                        }\r\n                        if (bookingDetail.isRefund)\r\n                        {\r\n                            total = 0;\r\n                            var dayLeft = (bookingDetail.ItemPrices.Date - bookingDetail.RefundDate.Value).Days;\r\n                            var fee = entities.CancellationRefundFees\r\n                                .FirstOrDefault(t =\u003E t.CancellationPolicyID == bookingDetail.RefundCancellationPoliciyID\r\n                                    \u0026\u0026 t.DaysLeft == dayLeft);\r\n                            if (fee != null)\r\n                            {\r\n                                var refundAmount = bookingDetail.ItemPrices.Price * (fee.PenaltyPercentage / 100) / 2;\r\n                                total = refundAmount;\r\n                            }\r\n                        }\r\n                        userRevenue.Add(new Tuple\u003CUsers, decimal, decimal\u003E(bookingDetail.ItemPrices.Items.Users, total, commission));\r\n                    }\r\n                }\r\n            }\r\n            this.HostDataGridView.DataSource = hosts.Select(t =\u003E\r\n            {\r\n                var total = userRevenue.Where(x =\u003E x.Item1.ID == t.ID).Sum(x =\u003E x.Item2);\r\n                var commission = userRevenue.Where(x =\u003E x.Item1.ID == t.ID).Sum(x =\u003E x.Item3);\r\n                var net = total - commission;\r\n                var withdrawData = tansactions.Where(x =\u003E x.UserID == t.ID \u0026\u0026 x.TransactionTypeID == 2).ToList();\r\n                return new\r\n                {\r\n                    t.ID,\r\n                    t.FullName,\r\n                    TotalRevenue = \u0022$\u0022 \u002B total,\r\n                    NetRevenun = \u0022$\u0022 \u002B net,\r\n                    RemainingBalance = \u0022$\u0022 \u002B (total - withdrawData.Sum(x =\u003E x.Amount)),\r\n                    LastWithdrawal = withdrawData.LastOrDefault()?.TransactionDate.ToString(\u0022yyyy-MM-dd\u0022) ?? \u0022\u0022\r\n                };\r\n            }).ToList();\r\n        }\r\n        public void CreateLabel(string text, Control control, int index)\r\n        {\r\n            Label label = new Label()\r\n            {\r\n                Text = text,\r\n                AutoSize = true,\r\n                Location = new Point(15, (index \u002B 1) * 30),\r\n                Font = base.Font\r\n            };\r\n            control.Controls.Add(label);\r\n        }\r\n        private void ServiceDataGridView_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)\r\n        {\r\n            if (e.ColumnIndex \u003C 1)\r\n                return;\r\n            int value = Convert.ToInt32(e.Value);\r\n            e.Value = \u0022\u0022;\r\n            if (value == 1)\r\n                e.CellStyle.BackColor = Color.FromArgb(229, 26, 46);\r\n            else if (value == 2)\r\n                ServiceDataGridView.Columns[e.ColumnIndex].HeaderText = \u0022\u0022;\r\n        }\r\n        private void HostDataGridView_CellClick(object sender, DataGridViewCellEventArgs e)\r\n        {\r\n            if (e.RowIndex \u003C 0)\r\n            {\r\n                return;\r\n            }\r\n            this.TransactionTitleLabel.Text = $\u0022Transaction detail for {this.HostDataGridView.Rows[e.RowIndex].Cells[1].Value.ToString()}\u0022;\r\n            this.TransactionDataGridView.Rows.Clear();\r\n\r\n            long hostId = (long)this.HostDataGridView.Rows[e.RowIndex].Cells[0].Value;\r\n\r\n            using (Session6Entities entities = new Session6Entities())\r\n            {\r\n                var bookings = entities.Bookings.ToList();\r\n                if (!String.IsNullOrWhiteSpace(this.FromDateTimePicker.Text))\r\n                {\r\n                    bookings = bookings.Where(t =\u003E t.BookingDate.Date \u003E= this.FromDateTimePicker.Value.Date).ToList();\r\n                }\r\n                if (!String.IsNullOrWhiteSpace(this.ToDateTimePicker.Text))\r\n                {\r\n                    bookings = bookings.Where(t =\u003E t.BookingDate.Date \u003C= this.ToDateTimePicker.Value.Date).ToList();\r\n                }\r\n                if (!String.IsNullOrWhiteSpace(this.GuestComboBox.Text))\r\n                {\r\n                    bookings = bookings.Where(t =\u003E t.UserID == (long)this.GuestComboBox.SelectedValue).ToList();\r\n                }\r\n\r\n                foreach (var booking in bookings.Where(t =\u003E t.BookingDetails.All(x =\u003E x.ItemPrices.Items.UserID == hostId)).OrderBy(t =\u003E t.BookingDate))\r\n                {\r\n                    List\u003CBookingDetails\u003E refundDetails = new List\u003CBookingDetails\u003E();\r\n                    foreach (var bookingDetailGropping in booking.BookingDetails.GroupBy(t =\u003E t.ItemPrices.Items))\r\n                    {\r\n                        decimal amount = 0;\r\n                        decimal commission = 0;\r\n                        var bookingDetailGroppingOrderBy = bookingDetailGropping.OrderBy(t =\u003E t.ItemPrices.Date);\r\n                        foreach (var bookingDetails in bookingDetailGroppingOrderBy)\r\n                        {\r\n                            if (bookingDetails.isRefund)\r\n                            {\r\n                                refundDetails.Add(bookingDetails);\r\n                            }\r\n\r\n                            decimal value = bookingDetails.ItemPrices.Price;\r\n                            commission \u002B= bookingDetails.ItemPrices.Price * (bookingDetails.ItemPrices.CancellationPolicies.Commission / 100);\r\n                            if (booking.CouponID.HasValue)\r\n                            {\r\n                                var discount = bookingDetails.ItemPrices.Price * (booking.Coupons.DiscountPercent / 100);\r\n                                if (discount \u003E booking.Coupons.MaximimDiscountAmount)\r\n                                {\r\n                                    discount = booking.Coupons.MaximimDiscountAmount;\r\n                                }\r\n                                value -= discount;\r\n                            }\r\n                            amount \u002B= value;\r\n                        }\r\n                        this.TransactionDataGridView.Rows.Add(booking.Transactions.TransactionDate.ToString(\u0022yyyy-MM-dd\u0022),\r\n                            \u0022$\u0022 \u002B amount,\r\n                            \u0022$\u0022 \u002B commission,\r\n                            $\u0022Reserve {bookingDetailGroppingOrderBy.First().ItemPrices.Items.Title} from {bookingDetailGroppingOrderBy.First().ItemPrices.Date.ToString(\u0022yyyy-MM-dd\u0022)} - {bookingDetailGroppingOrderBy.Last().ItemPrices.Date.ToString(\u0022yyyy-MM-dd\u0022)}\u0022);\r\n                    }\r\n\r\n                    List\u003CBookingDetails\u003E current = new List\u003CBookingDetails\u003E();\r\n                    List\u003CList\u003CBookingDetails\u003E\u003E refundGropping = new List\u003CList\u003CBookingDetails\u003E\u003E();\r\n                    for (int i = 0; i \u003C refundDetails.Count(); i\u002B\u002B)\r\n                    {\r\n                        if (i == 0)\r\n                        {\r\n                            current.Add(refundDetails[i]);\r\n                            if (i == refundDetails.Count() - 1)\r\n                            {\r\n                                refundGropping.Add(current);\r\n                            }\r\n                            continue;\r\n                        }\r\n                        if (refundDetails[i].ItemPrices.Date.Date == refundDetails[i - 1].ItemPrices.Date.AddDays(1).Date)\r\n                        {\r\n                            current.Add(refundDetails[i]);\r\n                            if (i == refundDetails.Count() - 1)\r\n                            {\r\n                                refundGropping.Add(current);\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n\r\n                            refundGropping.Add(current);\r\n                            current = new List\u003CBookingDetails\u003E() { refundDetails[i] };\r\n                            if (i == refundDetails.Count() - 1)\r\n                            {\r\n                                refundGropping.Add(current);\r\n                            }\r\n                        }\r\n                    }\r\n                    foreach (var refunds in refundGropping)\r\n                    {\r\n                        decimal amount = 0;\r\n                        decimal commission = 0;\r\n                        refunds.ForEach(t =\u003E\r\n                        {\r\n                            decimal value = t.ItemPrices.Price;\r\n                            if (booking.CouponID.HasValue)\r\n                            {\r\n                                var discount = value * (booking.Coupons.DiscountPercent / 100);\r\n                                if (discount \u003E booking.Coupons.MaximimDiscountAmount)\r\n                                {\r\n                                    discount = booking.Coupons.MaximimDiscountAmount;\r\n                                }\r\n                                value -= discount;\r\n                            }\r\n                            amount \u002B= value;\r\n\r\n                            var dayLeft = (t.ItemPrices.Date - t.RefundDate.Value).Days;\r\n                            var fee = entities.CancellationRefundFees\r\n                                .FirstOrDefault(x =\u003E x.CancellationPolicyID == t.RefundCancellationPoliciyID\r\n                                    \u0026\u0026 x.DaysLeft == dayLeft);\r\n                            if (fee != null)\r\n                            {\r\n                                var refundAmount = t.ItemPrices.Price * (fee.PenaltyPercentage / 100) / 2;\r\n                                commission \u002B= refundAmount;\r\n                            }\r\n                        });\r\n                        this.TransactionDataGridView.Rows.Add(booking.Transactions.TransactionDate.ToString(\u0022yyyy-MM-dd\u0022),\r\n                            \u0022$\u0022 \u002B amount,\r\n                            \u0022$\u0022 \u002B commission,\r\n                            $\u0022Cancel Reserve {refunds.First().ItemPrices.Items.Title} from {refunds.First().ItemPrices.Date.ToString(\u0022yyyy-MM-dd\u0022)} - {refunds.Last().ItemPrices.Date.ToString(\u0022yyyy-MM-dd\u0022)}\u0022);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","Selections":[{"Caret":277,"Start":0,"End":277}],"FilePath":"C:\\Users\\USER\\Documents\\GitHub\\Practise\\\u570B\u969B\u8CFD\\First\\Session6\\Session6\\Session6\\Main.cs","Language":"C#"}],"PreSelectedSkill":null,"CorrelationId":{"Guid":"a0ecae35-0e84-4433-a1b9-f70d4a992b42"}}},"Response":{"Content":"I apologize, but I\u0027m not quite sure what you\u0027re asking. Could you please rephrase the question or provide more context?","Type":0,"Status":1,"FollowUpPrompts":["What specifically would you like me to explain?","Is there anything related to \u0060define\u0060 that you would like me to clarify?"]},"SelectedFunctionName":"Answer","LoggedSkillInvocations":null}
{"version":1,"Request":{"Prompt":"use define to make a for loop like loop(n)","Context":{"VisibleDocuments":[{"Content":"using System;\r\nusing System.Collections.Generic;\r\nusing System.ComponentModel;\r\nusing System.Data;\r\nusing System.Diagnostics;\r\nusing System.Drawing;\r\nusing System.Globalization;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing System.Windows.Forms;\r\nnamespace Session6\r\n{\r\n    public partial class Main : Form\r\n    {\r\n\r\n        public Main()\r\n        {\r\n            InitializeComponent();\r\n            init();\r\n        }\r\n        public void init()\r\n        {\r\n            Session6Entities entities = new Session6Entities();\r\n            FromDateTimePicker.CustomFormat = \u0022 \u0022;\r\n            ToDateTimePicker.CustomFormat = \u0022 \u0022;\r\n            var areaData = entities.Areas.Select(t =\u003E new { t.ID, t.Name }).ToList();\r\n            areaData.Insert(0, new { ID = (long)-1, Name = \u0022\u0022 });\r\n            AreaComboBox.DataSource = areaData;\r\n            AreaComboBox.DisplayMember = \u0022Name\u0022;\r\n            AreaComboBox.ValueMember = \u0022ID\u0022;\r\n            var hostData = entities.Users.Where(t =\u003E t.Items.Any()).Select(t =\u003E new { t.ID, t.FullName }).OrderBy(t =\u003E t.FullName).ToList();\r\n            hostData.Insert(0, new { ID = (long)-1, FullName = \u0022\u0022 });\r\n            HostComboBox.DataSource = hostData;\r\n            HostComboBox.DisplayMember = \u0022FullName\u0022;\r\n            HostComboBox.ValueMember = \u0022ID\u0022;\r\n            var guestData = entities.Users.Where(t =\u003E t.Bookings.Any()).OrderBy(t =\u003E t.Items.Count()).ToList().Reverse\u003CUsers\u003E().Select(t =\u003E new { t.ID, t.FullName }).ToList();\r\n            guestData.Insert(0, new { ID = (long)-1, FullName = \u0022\u0022 });\r\n            GuestComboBox.DataSource = guestData;\r\n            GuestComboBox.DisplayMember = \u0022FullName\u0022;\r\n            GuestComboBox.ValueMember = \u0022ID\u0022;\r\n        }\r\n        private void FromDateTimePicker_ValueChanged(object sender, EventArgs e)\r\n        {\r\n            ((DateTimePicker)sender).Format = DateTimePickerFormat.Custom;\r\n            ((DateTimePicker)sender).CustomFormat = \u0022yyyy-MM-dd\u0022;\r\n        }\r\n        private void ResetBtn_Click(object sender, EventArgs e) =\u003E init();\r\n        private void ApplyBtn_Click(object sender, EventArgs e)\r\n        {\r\n            if (!String.IsNullOrWhiteSpace(FromDateTimePicker.Text) \u0026\u0026 !String.IsNullOrWhiteSpace(ToDateTimePicker.Text))\r\n            {\r\n                if (FromDateTimePicker.Value.Date \u003E ToDateTimePicker.Value.Date)\r\n                {\r\n                    MessageBox.Show(\u0022From date can\u0027t over To date.\u0022);\r\n                    return;\r\n                }\r\n            }\r\n            if (TabControlMain.SelectedIndex == 0)\r\n                page1();\r\n            if (TabControlMain.SelectedIndex == 1)\r\n                page2();\r\n            if (TabControlMain.SelectedIndex == 2)\r\n                page3();\r\n        }\r\n        public void page1()\r\n        {\r\n            Session6Entities entities = new Session6Entities();\r\n            ListingsSummaryPanel.Controls.Clear();\r\n            ScoresSummaryPanel.Controls.Clear();\r\n            FinancialSummaryPanel.Controls.Clear();\r\n            chart.Series[0].Points.Clear();\r\n            chart.Series[1].Points.Clear();\r\n            var items = entities.Items.ToList();\r\n            var itemPrices = entities.ItemPrices.ToList();\r\n            var transactions = entities.Transactions.ToList();\r\n            var bookingDetails = entities.BookingDetails.ToList();\r\n            if (!String.IsNullOrWhiteSpace(FromDateTimePicker.Text))\r\n            {\r\n                itemPrices = itemPrices.Where(t =\u003E t.Date.Date \u003E= FromDateTimePicker.Value.Date).ToList();\r\n                transactions = transactions.Where(t =\u003E t.TransactionDate.Date \u003E= FromDateTimePicker.Value.Date).ToList();\r\n            }\r\n            if (!String.IsNullOrWhiteSpace(ToDateTimePicker.Text))\r\n            {\r\n                itemPrices = itemPrices.Where(t =\u003E t.Date.Date \u003C= ToDateTimePicker.Value.Date).ToList();\r\n                transactions = transactions.Where(t =\u003E t.TransactionDate.Date \u003C= ToDateTimePicker.Value.Date).ToList();\r\n            }\r\n            if (!String.IsNullOrWhiteSpace(AreaComboBox.Text))\r\n            {\r\n                var areaId = (long)AreaComboBox.SelectedValue;\r\n                items = items.Where(t =\u003E t.AreaID == areaId).ToList();\r\n                itemPrices = itemPrices.Where(t =\u003E t.Items.AreaID == areaId).ToList();\r\n            }\r\n            if (!String.IsNullOrWhiteSpace(HostComboBox.Text))\r\n            {\r\n                var hostId = (long)HostComboBox.SelectedValue;\r\n                items = items.Where(t =\u003E t.UserID == hostId).ToList();\r\n                itemPrices = itemPrices.Where(t =\u003E t.Items.UserID == hostId).ToList();\r\n                transactions = transactions.Where(t =\u003E t.UserID == hostId).ToList();\r\n            }\r\n            if (!String.IsNullOrWhiteSpace(GuestComboBox.Text))\r\n            {\r\n                var guestId = (long)GuestComboBox.SelectedValue;\r\n                transactions = transactions.Where(t =\u003E t.UserID == guestId).ToList();\r\n                bookingDetails = bookingDetails.Where(t =\u003E t.Bookings.UserID == guestId).ToList();\r\n            }\r\n            #region Property or listing summary\r\n            var completeBooked = bookingDetails.Where(t =\u003E !t.isRefund \u0026\u0026 t.ItemPrices.Date.Date \u003C DateTime.Now.Date).ToList();\r\n            CreateLabel($\u0022Secured Bookings: {completeBooked.Count()}\u0022, ListingsSummaryPanel, 0);\r\n            var ppcomingBooked = bookingDetails\r\n                .Where(t =\u003E !t.isRefund \u0026\u0026 t.ItemPrices.Date.Date \u003E= DateTime.Now.Date).ToList();\r\n            CreateLabel($\u0022Upcoming Bookings(reservations): {ppcomingBooked.Count()}\u0022, ListingsSummaryPanel, 1);\r\n            var mostBookedDate = completeBooked.GroupBy(t =\u003E t.ItemPrices.Date.DayOfWeek).OrderByDescending(t =\u003E t.Count()).FirstOrDefault();\r\n            CreateLabel($\u0022Most booked day of week: {(mostBookedDate != null ? mostBookedDate.Key.ToString() : \u0022N/A\u0022)}\u0022, ListingsSummaryPanel, 2);\r\n            var inactiveItems = items.Where(t =\u003E !t.ItemPrices.Any()).ToList();\r\n            CreateLabel($\u0022Inactive listings or properties: {inactiveItems.Count()}\u0022, ListingsSummaryPanel, 3);\r\n            var coupons = bookingDetails.Where(t =\u003E t.Bookings.CouponID.HasValue).GroupBy(t =\u003E t.Bookings.Coupons).Select(t =\u003E new { Name = t.Key.CouponCode, Count = t.Count() }).GroupBy(t =\u003E t.Count).OrderByDescending(t =\u003E t.Key).FirstOrDefault();\r\n            CreateLabel($\u0022Most used coupon:  {(coupons == null ? \u0022N/A\u0022 : String.Join(\u0022,\u0022, coupons.Select(t =\u003E t.Name)))}\u0022, ListingsSummaryPanel, 4);\r\n            var vacancy = itemPrices.Where(t =\u003E !t.BookingDetails.Any() || t.BookingDetails.All(x =\u003E x.isRefund)).ToList();\r\n            CreateLabel($\u0022Vacancy ratio: {vacancy.Count()}/{itemPrices.Count()}\u0022, ListingsSummaryPanel, 5);\r\n            #endregion\r\n            #region Scores Summary\r\n            var AverageScore = items.Where(x =\u003E x.ItemScores.Any()).SelectMany(x =\u003E x.ItemScores);\r\n            CreateLabel($\u0022Average score for listings:  {(AverageScore.Any() ? AverageScore.Average(t =\u003E t.Value).ToString(\u0022#.##\u0022) : \u0022N/A\u0022)}\u0022, ScoresSummaryPanel, 0);\r\n            var hightscore = items.Where(t =\u003E t.ItemScores.Any()).Select(t =\u003E new { Name = t.Title, Score = t.ItemScores.Average(x =\u003E x.Value) }).OrderByDescending(t =\u003E t.Score).FirstOrDefault();\r\n            CreateLabel($\u0022Name of listing with highest score:  {(hightscore == null ? \u0022N/A\u0022 : hightscore.Name)}\u0022, ScoresSummaryPanel, 1);\r\n            var topScoreUser = items.Where(t =\u003E t.ItemScores.Any()).Select(t =\u003E new { Name = t.Users.FullName, Score = t.ItemScores.Average(x =\u003E x.Value) }).GroupBy(t =\u003E t.Score).OrderByDescending(t =\u003E t.Key).FirstOrDefault();\r\n            CreateLabel($\u0022Top owner / manager by average score: {(topScoreUser == null ? \u0022N/A\u0022 : String.Join(\u0022,\u0022, topScoreUser.Select(t =\u003E t.Name)))}\u0022, ScoresSummaryPanel, 2);\r\n            var leastScoreUser = items.Where(t =\u003E t.ItemScores.Any()).Select(t =\u003E new { Name = t.Users.FullName, Score = t.ItemScores.Average(x =\u003E x.Value) }).GroupBy(t =\u003E t.Score).OrderBy(t =\u003E t.Key).FirstOrDefault();\r\n            CreateLabel($\u0022The least clean owner / manager:   {(leastScoreUser == null ? \u0022N/A\u0022 : String.Join(\u0022,\u0022, leastScoreUser.Select(t =\u003E t.Name)))}\u0022, ScoresSummaryPanel, 3);\r\n            #endregion\r\n            #region Monthly Vacancy Ratio:\r\n            var timefiler = !String.IsNullOrWhiteSpace(ToDateTimePicker.Text) ? ToDateTimePicker.Value : DateTime.Now;\r\n            var start = new DateTime(timefiler.AddMonths(-2).Year, timefiler.AddMonths(-2).Month, 1);\r\n            var end = new DateTime(timefiler.Year, timefiler.Month, DateTime.DaysInMonth(timefiler.Year, timefiler.Month));\r\n            for (DateTime temp = start; temp \u003C end; temp = temp.AddMonths(1))\r\n            {\r\n                DateTime nextMonth = temp.AddMonths(1);\r\n                var data = itemPrices.Where(t =\u003E t.Date \u003E= temp \u0026\u0026 t.Date \u003C nextMonth).ToList();\r\n                chart.Series[0].Points.AddXY(temp.Date.ToString(\u0022MMM\u0022, new CultureInfo(\u0022en-US\u0022)), data.Count(t =\u003E !t.BookingDetails.Any() || t.BookingDetails.All(x =\u003E x.isRefund)));\r\n                chart.Series[1].Points.AddXY(temp.Date.ToString(\u0022MMM\u0022, new CultureInfo(\u0022en-US\u0022)), data.Count(t =\u003E t.BookingDetails.Any(x =\u003E !x.isRefund)));\r\n            }\r\n            #endregion\r\n            #region Financial Summary\r\n            decimal cancelAmount = 0;\r\n            decimal totalDiscount = 0;\r\n            List\u003CTuple\u003CUsers, decimal\u003E\u003E userRevenue = new List\u003CTuple\u003CUsers, decimal\u003E\u003E();\r\n            foreach (var transaction in transactions)\r\n            {\r\n                foreach (var booking in transaction.Bookings)\r\n                {\r\n                    foreach (var bookingDetail in booking.BookingDetails)\r\n                    {\r\n                        if (!String.IsNullOrWhiteSpace(HostComboBox.Text)\r\n                            \u0026\u0026 bookingDetail.ItemPrices.Items.UserID == (long)HostComboBox.SelectedValue)\r\n                        {\r\n                            continue;\r\n                        }\r\n                        if (!String.IsNullOrWhiteSpace(GuestComboBox.Text)\r\n                            \u0026\u0026 booking.UserID == (long)GuestComboBox.SelectedValue)\r\n                        {\r\n                            continue;\r\n                        }\r\n                        decimal total = bookingDetail.ItemPrices.Price -\r\n                            bookingDetail.ItemPrices.Price * (bookingDetail.ItemPrices.CancellationPolicies.Commission / 100);\r\n                        if (booking.CouponID.HasValue)\r\n                        {\r\n                            decimal discount = bookingDetail.ItemPrices.Price * (booking.Coupons.DiscountPercent / 100);\r\n                            if (discount \u003E booking.Coupons.MaximimDiscountAmount)\r\n                            {\r\n                                discount = booking.Coupons.MaximimDiscountAmount;\r\n                            }\r\n                            total -= discount;\r\n                            totalDiscount \u002B= discount;\r\n                        }\r\n                        if (bookingDetail.isRefund)\r\n                        {\r\n                            total = 0;\r\n                            var dayLeft = (bookingDetail.ItemPrices.Date - bookingDetail.RefundDate.Value).Days;\r\n                            var fee = entities.CancellationRefundFees\r\n                                .FirstOrDefault(t =\u003E t.CancellationPolicyID == bookingDetail.RefundCancellationPoliciyID\r\n                                    \u0026\u0026 t.DaysLeft == dayLeft);\r\n                            if (fee != null)\r\n                            {\r\n                                var refundAmount = bookingDetail.ItemPrices.Price * (fee.PenaltyPercentage / 100) / 2;\r\n                                cancelAmount \u002B= refundAmount;\r\n                                total = refundAmount;\r\n                            }\r\n                        }\r\n                        userRevenue.Add(new Tuple\u003CUsers, decimal\u003E(booking.Users, total));\r\n                    }\r\n                }\r\n            }\r\n            var userRevenueMapping = userRevenue.GroupBy(t =\u003E t.Item1).ToList();\r\n            CreateLabel($\u0022Average net revenue of all owners / managers: {(userRevenueMapping.Count() != 0 ? userRevenueMapping.Average(t =\u003E t.Sum(x =\u003E x.Item2)).ToString(\u0022#.##\u0022) : \u00220\u0022)}\u0022, FinancialSummaryPanel, 0);\r\n            CreateLabel($\u0022Highest net revenue for an owner / manager: \u0022 \u002B $\u0022{(userRevenueMapping.Count() != 0 ? userRevenueMapping.OrderByDescending(t =\u003E t.Sum(x =\u003E x.Item2)).First().Key.FullName : \u0022N/A\u0022)}\u0022, FinancialSummaryPanel, 1);\r\n            CreateLabel($\u0022Our total revenue from cancellations: {cancelAmount.ToString(\u0022#.##\u0022)}\u0022, FinancialSummaryPanel, 2);\r\n            CreateLabel($\u0022Total discounts from coupons: {totalDiscount.ToString(\u0022#.##\u0022)}\u0022, FinancialSummaryPanel, 3);\r\n            #endregion\r\n        }\r\n        public void page2()\r\n        {\r\n            Session6Entities entities = new Session6Entities();\r\n            ServiceDataGridView.DataSource = null;\r\n            AddonServicesPanel.Controls.Clear();\r\n            var addonServiceDetails = entities.AddonServiceDetails.ToList();\r\n            if (!String.IsNullOrWhiteSpace(FromDateTimePicker.Text))\r\n            {\r\n                addonServiceDetails = addonServiceDetails.Where(t =\u003E t.FromDate.Date \u003E= FromDateTimePicker.Value.Date).ToList();\r\n            }\r\n            if (!String.IsNullOrWhiteSpace(ToDateTimePicker.Text))\r\n            {\r\n                addonServiceDetails = addonServiceDetails.Where(t =\u003E t.FromDate.Date \u003C= ToDateTimePicker.Value.Date).ToList();\r\n            }\r\n            CreateLabel($\u0022Number of purchased services: {addonServiceDetails.Where(t =\u003E t.FromDate.Date \u003C= DateTime.Today.Date \u0026\u0026 !t.isRefund).Count()}\u0022, AddonServicesPanel, 0);\r\n\r\n            decimal totalRevenue = addonServiceDetails.Sum(t =\u003E\r\n            {\r\n                if (t.isRefund)\r\n                    return 0;\r\n                var amount = t.NumberOfPeople * t.Services.Price;\r\n                if (t.AddonServices.CouponID.HasValue)\r\n                {\r\n                    var discount = amount * (t.AddonServices.Coupons.DiscountPercent / 100);\r\n                    if (discount \u003E t.AddonServices.Coupons.MaximimDiscountAmount)\r\n                        discount = t.AddonServices.Coupons.MaximimDiscountAmount;\r\n                    amount -= discount;\r\n                }\r\n                return amount;\r\n            });\r\n            CreateLabel($\u0022Total revenue from service reservations: {totalRevenue.ToString(\u0022#.##\u0022)}\u0022, AddonServicesPanel, 1);\r\n            var mostBookedService = addonServiceDetails.GroupBy(t =\u003E t.Services).GroupBy(t =\u003E t.Count()).OrderByDescending(t =\u003E t.Key).FirstOrDefault();\r\n            CreateLabel($\u0022Most booked service: {(mostBookedService == null ? \u0022N/A\u0022 : String.Join(\u0022,\u0022, mostBookedService.Select(t =\u003E t.Key.Name)))}\u0022, AddonServicesPanel, 2);\r\n            List\u003Cobject\u003E dataSource = new List\u003Cobject\u003E();\r\n            var yearFilter = !String.IsNullOrWhiteSpace(ToDateTimePicker.Text) ? ToDateTimePicker.Value.Year : DateTime.Now.Year;\r\n            var fromMonth = !String.IsNullOrWhiteSpace(FromDateTimePicker.Text) ? FromDateTimePicker.Value.Month : 1;\r\n            var toMonth = !String.IsNullOrWhiteSpace(ToDateTimePicker.Text) ? ToDateTimePicker.Value.Month : 12;\r\n            foreach (var serviceType in entities.ServiceTypes.ToList())\r\n            {\r\n                List\u003Cint\u003E serviceMonthlyAvaiable = new List\u003Cint\u003E() { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };\r\n                for (int month = fromMonth; month \u003C= toMonth; month\u002B\u002B)\r\n                {\r\n                    bool avaiable = false;\r\n                    foreach (var service in serviceType.Services)\r\n                    {\r\n                        List\u003Cint\u003E timeRange = new List\u003Cint\u003E();\r\n                        if (service.DayOfMonth == \u0022*\u0022 || service.DayOfWeek == \u0022*\u0022)\r\n                            timeRange.AddRange(Enumerable.Range(1, DateTime.DaysInMonth(yearFilter, month)));\r\n                        if (!timeRange.Any())\r\n                        {\r\n                            var source = String.IsNullOrWhiteSpace(service.DayOfMonth) ? service.DayOfWeek : service.DayOfMonth;\r\n                            timeRange.AddRange(source.Split(\u0027,\u0027).Select(t =\u003E t.Split(\u0027-\u0027)).SelectMany(t =\u003E Enumerable.Range(Convert.ToInt32(t.First()), (Convert.ToInt32(t.Last()) - Convert.ToInt32(t.First())) \u002B 1)).OrderBy(t =\u003E t).ToList());\r\n                        }\r\n                        var details = service.AddonServiceDetails.Where(t =\u003E t.FromDate.Year == yearFilter \u0026\u0026 t.FromDate.Month == month \u0026\u0026 !t.isRefund).ToList();\r\n                        if (!String.IsNullOrWhiteSpace(service.DayOfWeek))\r\n                        {\r\n                            avaiable |= timeRange.Any(t =\u003E\r\n                            {\r\n                                var data = details.Where(x =\u003E x.FromDate.DayOfWeek == (DayOfWeek)t).ToList();\r\n                                if (data.Count() == 0)\r\n                                    return true;\r\n                                return data.Sum(x =\u003E x.NumberOfPeople) \u003C= service.DailyCap;\r\n                            });\r\n                        }\r\n                        if (!String.IsNullOrWhiteSpace(service.DayOfMonth))\r\n                        {\r\n                            avaiable |= timeRange.Any(t =\u003E\r\n                            {\r\n                                var data = details.Where(x =\u003E x.FromDate.Day == t).ToList();\r\n                                if (data.Count() == 0)\r\n                                    return true;\r\n                                return data.Sum(x =\u003E x.NumberOfPeople) \u003C= service.DailyCap;\r\n                            });\r\n                        }\r\n                    }\r\n                    serviceMonthlyAvaiable[month - 1] = Convert.ToInt32(avaiable);\r\n                }\r\n                dataSource.Add(new\r\n                {\r\n                    serviceType.Name,\r\n                    Jan = serviceMonthlyAvaiable[0].ToString(),\r\n                    Feb = serviceMonthlyAvaiable[1].ToString(),\r\n                    Mar = serviceMonthlyAvaiable[2].ToString(),\r\n                    Apr = serviceMonthlyAvaiable[3].ToString(),\r\n                    May = serviceMonthlyAvaiable[4].ToString(),\r\n                    Jun = serviceMonthlyAvaiable[5].ToString(),\r\n                    Jul = serviceMonthlyAvaiable[6].ToString(),\r\n                    Aug = serviceMonthlyAvaiable[7].ToString(),\r\n                    Sep = serviceMonthlyAvaiable[8].ToString(),\r\n                    Oct = serviceMonthlyAvaiable[9].ToString(),\r\n                    Nov = serviceMonthlyAvaiable[10].ToString(),\r\n                    Dec = serviceMonthlyAvaiable[11].ToString(),\r\n                });\r\n            }\r\n            ServiceDataGridView.DataSource = dataSource;\r\n            ServiceDataGridView.Columns[0].HeaderText = \u0022\u0022;\r\n        }\r\n        public void page3()\r\n        {\r\n            Session6Entities entities = new Session6Entities();\r\n            HostDataGridView.DataSource = null;\r\n            TransactionDataGridView.Rows.Clear();\r\n            TransactionTitleLabel.Text = null;\r\n            var tansactions = entities.Transactions.ToList();\r\n            var hosts = entities.Users.Where(t =\u003E t.Items.Any()).ToList();\r\n            if (!String.IsNullOrWhiteSpace(this.FromDateTimePicker.Text))\r\n            {\r\n                tansactions = tansactions.Where(t =\u003E t.TransactionDate.Date \u003E= this.FromDateTimePicker.Value.Date).ToList();\r\n            }\r\n            if (!String.IsNullOrWhiteSpace(this.ToDateTimePicker.Text))\r\n            {\r\n                tansactions = tansactions.Where(t =\u003E t.TransactionDate.Date \u003C= this.ToDateTimePicker.Value.Date).ToList();\r\n            }\r\n            if (!String.IsNullOrWhiteSpace(this.HostComboBox.Text))\r\n            {\r\n                hosts = hosts.Where(t =\u003E t.ID == (long)this.HostComboBox.SelectedValue).ToList();\r\n            }\r\n            List\u003CTuple\u003CUsers, decimal, decimal\u003E\u003E userRevenue = new List\u003CTuple\u003CUsers, decimal, decimal\u003E\u003E();\r\n            foreach (var transaction in tansactions)\r\n            {\r\n                foreach (var booking in transaction.Bookings)\r\n                {\r\n                    foreach (var bookingDetail in booking.BookingDetails)\r\n                    {\r\n                        if (!String.IsNullOrWhiteSpace(this.HostComboBox.Text)\r\n                            \u0026\u0026 bookingDetail.ItemPrices.Items.UserID == (long)this.HostComboBox.SelectedValue)\r\n                        {\r\n                            continue;\r\n                        }\r\n                        if (!String.IsNullOrWhiteSpace(this.GuestComboBox.Text)\r\n                            \u0026\u0026 booking.UserID == (long)this.GuestComboBox.SelectedValue)\r\n                        {\r\n                            continue;\r\n                        }\r\n                        decimal commission = bookingDetail.ItemPrices.Price * (bookingDetail.ItemPrices.CancellationPolicies.Commission / 100);\r\n                        decimal total = bookingDetail.ItemPrices.Price;\r\n                        if (booking.CouponID.HasValue)\r\n                        {\r\n                            decimal discount = bookingDetail.ItemPrices.Price * (booking.Coupons.DiscountPercent / 100);\r\n                            if (discount \u003E booking.Coupons.MaximimDiscountAmount)\r\n                            {\r\n                                discount = booking.Coupons.MaximimDiscountAmount;\r\n                            }\r\n                            total -= discount;\r\n                        }\r\n                        if (bookingDetail.isRefund)\r\n                        {\r\n                            total = 0;\r\n                            var dayLeft = (bookingDetail.ItemPrices.Date - bookingDetail.RefundDate.Value).Days;\r\n                            var fee = entities.CancellationRefundFees\r\n                                .FirstOrDefault(t =\u003E t.CancellationPolicyID == bookingDetail.RefundCancellationPoliciyID\r\n                                    \u0026\u0026 t.DaysLeft == dayLeft);\r\n                            if (fee != null)\r\n                            {\r\n                                var refundAmount = bookingDetail.ItemPrices.Price * (fee.PenaltyPercentage / 100) / 2;\r\n                                total = refundAmount;\r\n                            }\r\n                        }\r\n                        userRevenue.Add(new Tuple\u003CUsers, decimal, decimal\u003E(bookingDetail.ItemPrices.Items.Users, total, commission));\r\n                    }\r\n                }\r\n            }\r\n            this.HostDataGridView.DataSource = hosts.Select(t =\u003E\r\n            {\r\n                var total = userRevenue.Where(x =\u003E x.Item1.ID == t.ID).Sum(x =\u003E x.Item2);\r\n                var commission = userRevenue.Where(x =\u003E x.Item1.ID == t.ID).Sum(x =\u003E x.Item3);\r\n                var net = total - commission;\r\n                var withdrawData = tansactions.Where(x =\u003E x.UserID == t.ID \u0026\u0026 x.TransactionTypeID == 2).ToList();\r\n                return new\r\n                {\r\n                    t.ID,\r\n                    t.FullName,\r\n                    TotalRevenue = \u0022$\u0022 \u002B total,\r\n                    NetRevenun = \u0022$\u0022 \u002B net,\r\n                    RemainingBalance = \u0022$\u0022 \u002B (total - withdrawData.Sum(x =\u003E x.Amount)),\r\n                    LastWithdrawal = withdrawData.LastOrDefault()?.TransactionDate.ToString(\u0022yyyy-MM-dd\u0022) ?? \u0022\u0022\r\n                };\r\n            }).ToList();\r\n        }\r\n        public void CreateLabel(string text, Control control, int index)\r\n        {\r\n            Label label = new Label()\r\n            {\r\n                Text = text,\r\n                AutoSize = true,\r\n                Location = new Point(15, (index \u002B 1) * 30),\r\n                Font = base.Font\r\n            };\r\n            control.Controls.Add(label);\r\n        }\r\n        private void ServiceDataGridView_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)\r\n        {\r\n            if (e.ColumnIndex \u003C 1)\r\n                return;\r\n            int value = Convert.ToInt32(e.Value);\r\n            e.Value = \u0022\u0022;\r\n            if (value == 1)\r\n                e.CellStyle.BackColor = Color.FromArgb(229, 26, 46);\r\n            else if (value == 2)\r\n                ServiceDataGridView.Columns[e.ColumnIndex].HeaderText = \u0022\u0022;\r\n        }\r\n        private void HostDataGridView_CellClick(object sender, DataGridViewCellEventArgs e)\r\n        {\r\n            if (e.RowIndex \u003C 0)\r\n            {\r\n                return;\r\n            }\r\n            this.TransactionTitleLabel.Text = $\u0022Transaction detail for {this.HostDataGridView.Rows[e.RowIndex].Cells[1].Value.ToString()}\u0022;\r\n            this.TransactionDataGridView.Rows.Clear();\r\n\r\n            long hostId = (long)this.HostDataGridView.Rows[e.RowIndex].Cells[0].Value;\r\n\r\n            using (Session6Entities entities = new Session6Entities())\r\n            {\r\n                var bookings = entities.Bookings.ToList();\r\n                if (!String.IsNullOrWhiteSpace(this.FromDateTimePicker.Text))\r\n                {\r\n                    bookings = bookings.Where(t =\u003E t.BookingDate.Date \u003E= this.FromDateTimePicker.Value.Date).ToList();\r\n                }\r\n                if (!String.IsNullOrWhiteSpace(this.ToDateTimePicker.Text))\r\n                {\r\n                    bookings = bookings.Where(t =\u003E t.BookingDate.Date \u003C= this.ToDateTimePicker.Value.Date).ToList();\r\n                }\r\n                if (!String.IsNullOrWhiteSpace(this.GuestComboBox.Text))\r\n                {\r\n                    bookings = bookings.Where(t =\u003E t.UserID == (long)this.GuestComboBox.SelectedValue).ToList();\r\n                }\r\n\r\n                foreach (var booking in bookings.Where(t =\u003E t.BookingDetails.All(x =\u003E x.ItemPrices.Items.UserID == hostId)).OrderBy(t =\u003E t.BookingDate))\r\n                {\r\n                    List\u003CBookingDetails\u003E refundDetails = new List\u003CBookingDetails\u003E();\r\n                    foreach (var bookingDetailGropping in booking.BookingDetails.GroupBy(t =\u003E t.ItemPrices.Items))\r\n                    {\r\n                        decimal amount = 0;\r\n                        decimal commission = 0;\r\n                        var bookingDetailGroppingOrderBy = bookingDetailGropping.OrderBy(t =\u003E t.ItemPrices.Date);\r\n                        foreach (var bookingDetails in bookingDetailGroppingOrderBy)\r\n                        {\r\n                            if (bookingDetails.isRefund)\r\n                            {\r\n                                refundDetails.Add(bookingDetails);\r\n                            }\r\n\r\n                            decimal value = bookingDetails.ItemPrices.Price;\r\n                            commission \u002B= bookingDetails.ItemPrices.Price * (bookingDetails.ItemPrices.CancellationPolicies.Commission / 100);\r\n                            if (booking.CouponID.HasValue)\r\n                            {\r\n                                var discount = bookingDetails.ItemPrices.Price * (booking.Coupons.DiscountPercent / 100);\r\n                                if (discount \u003E booking.Coupons.MaximimDiscountAmount)\r\n                                {\r\n                                    discount = booking.Coupons.MaximimDiscountAmount;\r\n                                }\r\n                                value -= discount;\r\n                            }\r\n                            amount \u002B= value;\r\n                        }\r\n                        this.TransactionDataGridView.Rows.Add(booking.Transactions.TransactionDate.ToString(\u0022yyyy-MM-dd\u0022),\r\n                            \u0022$\u0022 \u002B amount,\r\n                            \u0022$\u0022 \u002B commission,\r\n                            $\u0022Reserve {bookingDetailGroppingOrderBy.First().ItemPrices.Items.Title} from {bookingDetailGroppingOrderBy.First().ItemPrices.Date.ToString(\u0022yyyy-MM-dd\u0022)} - {bookingDetailGroppingOrderBy.Last().ItemPrices.Date.ToString(\u0022yyyy-MM-dd\u0022)}\u0022);\r\n                    }\r\n\r\n                    List\u003CBookingDetails\u003E current = new List\u003CBookingDetails\u003E();\r\n                    List\u003CList\u003CBookingDetails\u003E\u003E refundGropping = new List\u003CList\u003CBookingDetails\u003E\u003E();\r\n                    for (int i = 0; i \u003C refundDetails.Count(); i\u002B\u002B)\r\n                    {\r\n                        if (i == 0)\r\n                        {\r\n                            current.Add(refundDetails[i]);\r\n                            if (i == refundDetails.Count() - 1)\r\n                            {\r\n                                refundGropping.Add(current);\r\n                            }\r\n                            continue;\r\n                        }\r\n                        if (refundDetails[i].ItemPrices.Date.Date == refundDetails[i - 1].ItemPrices.Date.AddDays(1).Date)\r\n                        {\r\n                            current.Add(refundDetails[i]);\r\n                            if (i == refundDetails.Count() - 1)\r\n                            {\r\n                                refundGropping.Add(current);\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n\r\n                            refundGropping.Add(current);\r\n                            current = new List\u003CBookingDetails\u003E() { refundDetails[i] };\r\n                            if (i == refundDetails.Count() - 1)\r\n                            {\r\n                                refundGropping.Add(current);\r\n                            }\r\n                        }\r\n                    }\r\n                    foreach (var refunds in refundGropping)\r\n                    {\r\n                        decimal amount = 0;\r\n                        decimal commission = 0;\r\n                        refunds.ForEach(t =\u003E\r\n                        {\r\n                            decimal value = t.ItemPrices.Price;\r\n                            if (booking.CouponID.HasValue)\r\n                            {\r\n                                var discount = value * (booking.Coupons.DiscountPercent / 100);\r\n                                if (discount \u003E booking.Coupons.MaximimDiscountAmount)\r\n                                {\r\n                                    discount = booking.Coupons.MaximimDiscountAmount;\r\n                                }\r\n                                value -= discount;\r\n                            }\r\n                            amount \u002B= value;\r\n\r\n                            var dayLeft = (t.ItemPrices.Date - t.RefundDate.Value).Days;\r\n                            var fee = entities.CancellationRefundFees\r\n                                .FirstOrDefault(x =\u003E x.CancellationPolicyID == t.RefundCancellationPoliciyID\r\n                                    \u0026\u0026 x.DaysLeft == dayLeft);\r\n                            if (fee != null)\r\n                            {\r\n                                var refundAmount = t.ItemPrices.Price * (fee.PenaltyPercentage / 100) / 2;\r\n                                commission \u002B= refundAmount;\r\n                            }\r\n                        });\r\n                        this.TransactionDataGridView.Rows.Add(booking.Transactions.TransactionDate.ToString(\u0022yyyy-MM-dd\u0022),\r\n                            \u0022$\u0022 \u002B amount,\r\n                            \u0022$\u0022 \u002B commission,\r\n                            $\u0022Cancel Reserve {refunds.First().ItemPrices.Items.Title} from {refunds.First().ItemPrices.Date.ToString(\u0022yyyy-MM-dd\u0022)} - {refunds.Last().ItemPrices.Date.ToString(\u0022yyyy-MM-dd\u0022)}\u0022);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","Selections":[{"Caret":277,"Start":0,"End":277}],"FilePath":"C:\\Users\\USER\\Documents\\GitHub\\Practise\\\u570B\u969B\u8CFD\\First\\Session6\\Session6\\Session6\\Main.cs","Language":"C#"}],"PreSelectedSkill":null,"CorrelationId":{"Guid":"fe5dc9b5-c51b-4ac4-bd9e-2d02c71eaec4"}}},"Response":{"Content":"\u0060\u0060\u0060C#\r\n#define loop(n) for (int i = 0; i \u003C n; i\u002B\u002B) {\r\n// code to be executed in loop\r\n}\r\n\u0060\u0060\u0060","Type":1,"Status":1,"FollowUpPrompts":null},"SelectedFunctionName":"Generate","LoggedSkillInvocations":null}
